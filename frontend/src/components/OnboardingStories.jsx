// frontend/src/components/OnboardingStories.jsx (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)

import React, { useState } from 'react';
import Lottie from 'lottie-react';
import { completeOnboarding } from '../api';
import styles from './OnboardingStories.module.css';

// --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
// –ú—ã –±—É–¥–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã "–±–µ–∑–æ–ø–∞—Å–Ω–æ"
let sticker1, sticker2, sticker3;
try {
  sticker1 = require('../assets/AnimatedSticker1.json');
  sticker2 = require('../assets/AnimatedSticker3.json');
  sticker3 = require('../assets/AnimatedSticker2.json');
} catch (error) {
  console.error("Could not load sticker animations. Check files in src/assets/", error);
  // –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è undefined
}
// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---


const stories = [
  {
    animation: sticker1,
    title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
    text: '¬´–°–ø–∞—Å–∏–±–æ¬ª ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∫–æ–ª–ª–µ–≥–∞–º. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ "—Å–ø–∞—Å–∏–±–∫–∏" –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∏—Ö –≤ –æ—Ç–≤–µ—Ç!',
  },
  {
    animation: sticker2,
    title: '–ö–æ–ø–∏—Ç–µ –∏ —Ç—Ä–∞—Ç—å—Ç–µ',
    text: '–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ "—Å–ø–∞—Å–∏–±–∫–∏" –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –º–µ—Ä—á, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏—è—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã –≤ –Ω–∞—à–µ–º –ú–∞–≥–∞–∑–∏–Ω–µ.',
  },
  {
    animation: sticker3,
    title: '–°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å',
    text: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ –†–µ–π—Ç–∏–Ω–≥–µ. –°—Ç–∞–Ω—å—Ç–µ —Å–∞–º—ã–º —â–µ–¥—Ä—ã–º –∏–ª–∏ —Å–∞–º—ã–º –ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º!',
  },
];

function OnboardingStories({ onComplete }) {
  // ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
  const [currentStep, setCurrentStep] = useState(0);

  const handleNext = () => {
    if (currentStep < stories.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      handleComplete();
    }
  };

  const handleComplete = async () => {
    try {
      await completeOnboarding();
      onComplete();
    } catch (error) {
      console.error("Failed to complete onboarding:", error);
      onComplete();
    }
  };

  const currentStory = stories[currentStep];

  return (
    <div className={styles.container}>
       {currentStep === 0 && (
        <button onClick={handleComplete} className={styles.skipButton}>
          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        </button>
      )}
      <div className={styles.content}>
        <div className={styles.stickerContainer}>
            {/* --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô --- */}
            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å */}
            {currentStory.animation ? (
              <Lottie
                animationData={currentStory.animation}
                loop={true}
                className={styles.sticker}
              />
            ) : (
              // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
              <p style={{ fontSize: '50px' }}>üñºÔ∏è</p>
            )}
            {/* --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô --- */}
        </div>
        <h1 className={styles.title}>{currentStory.title}</h1>
        <p className={styles.text}>{currentStory.text}</p>
      </div>

      <div className={styles.footer}>
        <div className={styles.dots}>
          {stories.map((_, index) => (
            <div
              key={index}
              className={`${styles.dot} ${index === currentStep ? styles.activeDot : ''}`}
            />
          ))}
        </div>
        <button onClick={handleNext} className={styles.nextButton}>
          {currentStep < stories.length - 1 ? '–î–∞–ª—å—à–µ' : '–ù–∞—á–∞—Ç—å!'}
        </button>
      </div>
    </div>
  );
}

export default OnboardingStories;
