// frontend/src/pages/RoulettePage.jsx

import React, { useState, useEffect, useRef } from 'react';
import PageLayout from '../components/PageLayout';
import { spinRoulette, assembleTickets, getRouletteHistory } from '../api';
import styles from './RoulettePage.module.css';
import { FaInfoCircle } from 'react-icons/fa';
import { useModalAlert } from '../contexts/ModalAlertContext';

const thankYouIcon = "https://i.postimg.cc/cLCwXyrL/Frame-2131328056.webp";
const ticketIcon = "https://i.postimg.cc/pX05sN69/ticket-icon.png";
const jackpotIcon = "https://i.postimg.cc/W3B9pG1c/jackpot-icon.png";

const PRIZES = {
    1: thankYouIcon, 2: thankYouIcon, 3: thankYouIcon, 4: thankYouIcon, 5: thankYouIcon,
    6: ticketIcon, 8: ticketIcon, 9: ticketIcon, 10: ticketIcon, 11: ticketIcon, 12: ticketIcon, 13: ticketIcon, 14: ticketIcon, 15: ticketIcon,
    16: jackpotIcon, 17: jackpotIcon, 18: jackpotIcon, 19: jackpotIcon, 20: jackpotIcon, 21: jackpotIcon, 22: jackpotIcon, 23: jackpotIcon, 24: jackpotIcon, 25: jackpotIcon, 26: jackpotIcon, 27: jackpotIcon, 28: jackpotIcon, 29: jackpotIcon, 30: jackpotIcon
};

const reelSymbols = [thankYouIcon, ticketIcon, jackpotIcon, ticketIcon, thankYouIcon, jackpotIcon, ticketIcon];

function RoulettePage({ user, onUpdateUser }) {
    const { showAlert } = useModalAlert();
    const [localUser, setLocalUser] = useState(user);
    const [history, setHistory] = useState([]);
    const [isSpinning, setIsSpinning] = useState(false);
    const [infoVisible, setInfoVisible] = useState(false);
    const [winAmount, setWinAmount] = useState(null);

    const reelsRef = useRef([]);

    useEffect(() => {
        const fetchHistory = async () => {
            try {
                const res = await getRouletteHistory();
                setHistory(res.data);
            } catch (error) { console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä—É–ª–µ—Ç–∫–∏:", error); }
        };
        fetchHistory();
        const intervalId = setInterval(fetchHistory, 5000);
        return () => clearInterval(intervalId);
    }, []);

    const handleAssemble = async () => {
        if (localUser.ticket_parts < 2) return;
        try {
            const response = await assembleTickets();
            setLocalUser(response.data);
            onUpdateUser(response.data);
            showAlert('–ë–∏–ª–µ—Ç —Å–æ–±—Ä–∞–Ω!', 'success');
        } catch (error) {
            showAlert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏', 'error');
        }
    };
    
    // --- –ù–û–í–ê–Ø, –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –í–†–ê–©–ï–ù–ò–Ø ---
    const handleSpin = async () => {
        if (localUser.tickets < 1 || isSpinning) return;
        setIsSpinning(true);
        setWinAmount(null);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞—Ä–∞–±–∞–Ω—ã –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        reelsRef.current.forEach(reel => {
            reel.style.transition = 'none';
            reel.style.transform = `translateY(0)`;
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ CSS
        reelsRef.current.forEach(reel => reel.classList.add(styles.spinning));

        try {
            const response = await spinRoulette();
            const { prize_won, new_balance, new_tickets } = response.data;
            const updatedUser = { ...localUser, balance: new_balance, tickets: new_tickets };
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞—à–µ–≥–æ –ø—Ä–∏–∑–∞
            const prizeIcon = PRIZES[prize_won];

            // –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±–∞—Ä–∞–±–∞–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
            const stopReel = (reelIndex) => {
                if (reelIndex >= reelsRef.current.length) {
                    // –í—Å–µ –±–∞—Ä–∞–±–∞–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
                    setLocalUser(updatedUser);
                    onUpdateUser(updatedUser);
                    setWinAmount(prize_won);
                    setIsSpinning(false);
                    getRouletteHistory().then(res => setHistory(res.data));
                    return;
                }

                const reel = reelsRef.current[reelIndex];
                const isCenterReel = reelIndex === 1;
                
                // –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É: –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ - –ø—Ä–∏–∑–æ–≤—É—é, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å–ª—É—á–∞–π–Ω—É—é
                const targetIcon = isCenterReel ? prizeIcon : reelSymbols[Math.floor(Math.random() * reelSymbols.length)];
                const targetIndex = reelSymbols.indexOf(targetIcon);
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                const symbolHeight = reel.querySelector(`.${styles.symbol}`).offsetHeight;
                const totalHeight = reel.scrollHeight;
                const basePosition = (totalHeight / 2) - (targetIndex * symbolHeight);
                const currentTransform = window.getComputedStyle(reel).transform;
                const matrix = new DOMMatrixReadOnly(currentTransform);
                const currentY = matrix.m42;

                // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
                reel.classList.remove(styles.spinning);
                reel.style.transition = 'none'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º transition –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ä–∞–±–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏—é —á—É—Ç—å "–≤—ã—à–µ" –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π
                const preStopPosition = basePosition - totalHeight/2;
                reel.style.transform = `translateY(${preStopPosition}px)`;
                
                // –ò –ø–ª–∞–≤–Ω–æ "–¥–æ–∫—Ä—É—á–∏–≤–∞–µ–º" –¥–æ –Ω—É–∂–Ω–æ–π –∏–∫–æ–Ω–∫–∏
                setTimeout(() => {
                    reel.style.transition = 'transform 1.5s cubic-bezier(0.25, 1, 0.5, 1)';
                    reel.style.transform = `translateY(${basePosition}px)`;
                }, 50);

                // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                setTimeout(() => stopReel(reelIndex + 1), 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã
            };

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
            stopReel(0);

        } catch (error) {
            showAlert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏', 'error');
            reelsRef.current.forEach(reel => reel.classList.remove(styles.spinning));
            setIsSpinning(false);
        }
    };


    return (
        <PageLayout title="–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞">
            <div className={styles.infoIcon} onClick={() => setInfoVisible(!infoVisible)}><FaInfoCircle /></div>
            {infoVisible && (
                <div className={styles.infoModal}>
                    <p>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ "—Å–ø–∞—Å–∏–±–∫–∏", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —á–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤ (1 –ø–µ—Ä–µ–≤–æ–¥ = 1 —á–∞—Å—Ç—å).</p>
                    <p>–°–æ–±–µ—Ä–∏—Ç–µ 2 —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 1 –±–∏–ª–µ—Ç –¥–ª—è –∏–≥—Ä—ã.</p>
                </div>
            )}

            <div className={styles.userBalance}>
                <div className={styles.balanceBox}>
                    <span>–ß–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤</span>
                    <strong>{localUser.ticket_parts} / 2</strong>
                </div>
                <button onClick={handleAssemble} disabled={localUser.ticket_parts < 2}>–°–æ–±—Ä–∞—Ç—å</button>
                <div className={styles.balanceBox}>
                    <span>–ë–∏–ª–µ—Ç—ã</span>
                    <strong>{localUser.tickets}</strong>
                </div>
            </div>

            <div className={styles.slotMachineWrapper}>
                <div className={styles.slotMachine}>
                    <div className={styles.slotGloss}></div>
                    <div className={styles.slotScreen}>
                        <div className={styles.reelsContainer}>
                            {[0, 1, 2].map(i => (
                                <div key={i} className={styles.reel}>
                                    <div className={styles.reelTrack} ref={el => reelsRef.current[i] = el}>
                                        {[...reelSymbols, ...reelSymbols].map((symbol, index) => (
                                            <div key={index} className={styles.symbol}>
                                                <img src={symbol} alt="symbol" />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
                <button className={styles.spinButton} onClick={handleSpin} disabled={isSpinning || localUser.tickets < 1}>
                    SPIN
                </button>
            </div>
            
            {winAmount !== null && <div className={styles.winMessage}>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winAmount} —Å–ø–∞—Å–∏–±–æ–∫! üéâ</div>}
            
            <div className={styles.history}>
                <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏</h3>
                {history.length > 0 ? history.map(win => (
                    <div key={win.id} className={styles.historyItem}>
                        <span>{win.user.first_name}</span>
                        <strong>–≤—ã–∏–≥—Ä–∞–ª(–∞) {win.amount} —Å–ø–∞—Å–∏–±–æ–∫</strong>
                    </div>
                )) : <p>–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–ª.</p>}
            </div>
        </PageLayout>
    );
}

export default RoulettePage;
