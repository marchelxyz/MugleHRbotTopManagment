// frontend/src/pages/RoulettePage.jsx

import React, { useState, useEffect, useRef } from 'react';
import PageLayout from '../components/PageLayout';
import { spinRoulette, assembleTickets, getRouletteHistory } from '../api';
import styles from './RoulettePage.module.css';
import { FaInfoCircle } from 'react-icons/fa';

const PRIZES = [17, 5, 12, 1, 30, 8, 19, 3, 23, 28, 14, 9, 21, 4, 7, 20, 25, 10, 2, 29, 11, 18, 13, 6, 26, 27, 24, 15, 22, 16];

function RoulettePage({ user, onUpdateUser }) {
  const [localUser, setLocalUser] = useState(user);
  const [history, setHistory] = useState([]);
  const [isSpinning, setIsSpinning] = useState(false);
  const [spinResult, setSpinResult] = useState(null);
  const [infoVisible, setInfoVisible] = useState(false);
  const rouletteTrackRef = useRef(null);

  // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò: "–ñ–ò–í–ê–Ø" –õ–ï–ù–¢–ê ---
  useEffect(() => {
    // 1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ–∂–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    const fetchHistory = async () => {
      try {
        const res = await getRouletteHistory();
        setHistory(res.data);
      } catch (error) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä—É–ª–µ—Ç–∫–∏:", error);
      }
    };

    // 2. –°—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    fetchHistory();

    // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –±—É–¥–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const intervalId = setInterval(fetchHistory, 5000); // 5000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ = 5 —Å–µ–∫—É–Ω–¥

    // 4. –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ö–æ–¥–∏—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    // –≠—Ç–æ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏.
    return () => clearInterval(intervalId);
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è 1 —Ä–∞–∑

  // --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

  const handleAssemble = async () => {
    if (localUser.ticket_parts < 2) return;
    try {
      const response = await assembleTickets();
      setLocalUser(response.data);
      onUpdateUser(response.data);
    } catch (error) {
      alert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏');
    }
  };

  const handleSpin = async () => {
    if (localUser.tickets < 1 || isSpinning) return;
    setIsSpinning(true);
    setSpinResult(null);
    
    const track = rouletteTrackRef.current;
    track.style.transition = 'none';
    track.style.transform = 'translateX(0)';

    try {
      const response = await spinRoulette();
      const { prize_won, new_balance, new_tickets } = response.data;
      
      const updatedUser = { ...localUser, balance: new_balance, tickets: new_tickets };
      setLocalUser(updatedUser);
      onUpdateUser(updatedUser);

      setTimeout(() => {
        const prizeItemWidth = 80;
        const prizeArrayForAnimation = [...PRIZES, ...PRIZES, ...PRIZES];
        let targetIndex = -1;
        for (let i = PRIZES.length; i < PRIZES.length * 2; i++) {
            if (prizeArrayForAnimation[i] === prize_won) {
                targetIndex = i;
                break;
            }
        }
        if (targetIndex === -1) {
            targetIndex = prizeArrayForAnimation.indexOf(prize_won);
        }

        const containerWidth = track.parentElement.offsetWidth;
        const stopPosition = (targetIndex * prizeItemWidth) - (containerWidth / 2) + (prizeItemWidth / 2);
        const randomOffset = Math.random() * 40 - 20;
        const finalPosition = stopPosition + randomOffset;

        track.style.transition = 'transform 4s cubic-bezier(.15,.56,.33,1.03)';
        track.style.transform = `translateX(-${finalPosition}px)`;
        
        setTimeout(() => {
          setSpinResult(prize_won);
          setIsSpinning(false);
          // –ü–æ—Å–ª–µ —Å–≤–æ–µ–≥–æ —Å–ø–∏–Ω–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ª–µ–Ω—Ç—É, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
          getRouletteHistory().then(res => setHistory(res.data));
        }, 4100);
      }, 100);

    } catch (error) {
      alert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏');
      setIsSpinning(false);
    }
  };

  return (
    <PageLayout title="–†—É–ª–µ—Ç–∫–∞">
      <div className={styles.infoIcon} onClick={() => setInfoVisible(!infoVisible)}>
        <FaInfoCircle />
      </div>

      {infoVisible && (
        <div className={styles.infoModal}>
          <p>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ "—Å–ø–∞—Å–∏–±–∫–∏" –∫–æ–ª–ª–µ–≥–∞–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —á–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤ (1 –ø–µ—Ä–µ–≤–æ–¥ = 1 —á–∞—Å—Ç—å).</p>
          <p>–°–æ–±–µ—Ä–∏—Ç–µ 2 —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 1 –±–∏–ª–µ—Ç –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ä—É–ª–µ—Ç–∫–∏.</p>
          <p>–ß–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤ —Å–≥–æ—Ä–∞—é—Ç —Ä–∞–∑ –≤ 3 –º–µ—Å—è—Ü–∞, —Ü–µ–ª—ã–µ –±–∏–ª–µ—Ç—ã - —Ä–∞–∑ –≤ 4 –º–µ—Å—è—Ü–∞.</p>
        </div>
      )}

      <div className={styles.userBalance}>
        <div className={styles.balanceBox}>
          <span>–ß–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤</span>
          <strong>{localUser.ticket_parts} / 2</strong>
        </div>
        <button onClick={handleAssemble} disabled={localUser.ticket_parts < 2}>–°–æ–±—Ä–∞—Ç—å</button>
        <div className={styles.balanceBox}>
          <span>–ë–∏–ª–µ—Ç—ã</span>
          <strong>{localUser.tickets}</strong>
        </div>
      </div>

      <div className={styles.rouletteContainer}>
        <div className={styles.pointer}></div>
        <div className={styles.rouletteTrack} ref={rouletteTrackRef}>
          {[...PRIZES, ...PRIZES, ...PRIZES].map((prize, index) => (
            <div key={index} className={styles.prizeItem}>{prize}</div>
          ))}
        </div>
      </div>

      {spinResult && <div className={styles.winMessage}>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {spinResult} —Å–ø–∞—Å–∏–±–æ–∫! üéâ</div>}

      <button onClick={handleSpin} disabled={localUser.tickets < 1 || isSpinning} className={styles.spinButton}>
        {isSpinning ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : `–ö—Ä—É—Ç–∏—Ç—å (1 –±–∏–ª–µ—Ç)`}
      </button>

      <div className={styles.history}>
        <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏</h3>
        {history.length > 0 ? history.map(win => (
          <div key={win.id} className={styles.historyItem}>
            <span>{win.user.first_name} {win.user.last_name}</span>
            <strong>–≤—ã–∏–≥—Ä–∞–ª(–∞) {win.amount} —Å–ø–∞—Å–∏–±–æ–∫</strong>
          </div>
        )) : <p>–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–ª.</p>}
      </div>
    </PageLayout>
  );
}

export default RoulettePage;
