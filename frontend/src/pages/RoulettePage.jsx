// frontend/src/pages/RoulettePage.jsx

import React, { useState, useEffect, useRef } from 'react';
import PageLayout from '../components/PageLayout';
import { spinRoulette, assembleTickets, getRouletteHistory } from '../api';
import styles from './RoulettePage.module.css';
import { FaInfoCircle } from 'react-icons/fa';
import { useModalAlert } from '../contexts/ModalAlertContext';

// --- –ù–ê–®–ò –ù–û–í–´–ï –ê–°–°–ï–¢–´ –î–õ–Ø –°–õ–û–¢-–ú–ê–®–ò–ù–´ ---
const thankYouIcon = "https://i.postimg.cc/cLCwXyrL/Frame-2131328056.webp"; // "–°–ø–∞—Å–∏–±–æ"
const ticketIcon = "https://i.postimg.cc/pX05sN69/ticket-icon.png"; // –ë–∏–ª–µ—Ç
const jackpotIcon = "https://i.postimg.cc/W3B9pG1c/jackpot-icon.png"; // –î–∂–µ–∫–ø–æ—Ç

// --- –ü–†–ò–ó–´ –ò –ò–• –ò–ö–û–ù–ö–ò ---
const PRIZES = {
    // –ú–∞–ª–µ–Ω—å–∫–∏–µ –ø—Ä–∏–∑—ã (—á–∞—â–µ –≤—Å–µ–≥–æ)
    1: thankYouIcon, 2: thankYouIcon, 3: thankYouIcon, 4: thankYouIcon, 5: thankYouIcon,
    // –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–∏–∑—ã (—Ä–µ–∂–µ)
    6: ticketIcon, 8: ticketIcon, 9: ticketIcon, 10: ticketIcon, 11: ticketIcon, 12: ticketIcon, 13: ticketIcon, 14: ticketIcon, 15: ticketIcon,
    // –ö—Ä—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã (–æ—á–µ–Ω—å —Ä–µ–¥–∫–æ)
    16: jackpotIcon, 17: jackpotIcon, 18: jackpotIcon, 19: jackpotIcon, 20: jackpotIcon, 21: jackpotIcon, 22: jackpotIcon, 23: jackpotIcon, 24: jackpotIcon, 25: jackpotIcon, 26: jackpotIcon, 27: jackpotIcon, 28: jackpotIcon, 29: jackpotIcon, 30: jackpotIcon
};

// –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
const reelSymbols = [thankYouIcon, ticketIcon, jackpotIcon, thankYouIcon, ticketIcon];

function RoulettePage({ user, onUpdateUser }) {
    const { showAlert } = useModalAlert();
    const [localUser, setLocalUser] = useState(user);
    const [history, setHistory] = useState([]);
    const [isSpinning, setIsSpinning] = useState(false);
    const [infoVisible, setInfoVisible] = useState(false);
    const [winAmount, setWinAmount] = useState(null);

    // –°—Å—ã–ª–∫–∏ –Ω–∞ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –±–∞—Ä–∞–±–∞–Ω–æ–≤
    const reel1Ref = useRef(null);
    const reel2Ref = useRef(null);
    const reel3Ref = useRef(null);
    const leverRef = useRef(null);

    useEffect(() => {
        const fetchHistory = async () => {
            try {
                const res = await getRouletteHistory();
                setHistory(res.data);
            } catch (error) { console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä—É–ª–µ—Ç–∫–∏:", error); }
        };
        fetchHistory();
        const intervalId = setInterval(fetchHistory, 5000);
        return () => clearInterval(intervalId);
    }, []);

    const handleAssemble = async () => {
        if (localUser.ticket_parts < 2) return;
        try {
            const response = await assembleTickets();
            setLocalUser(response.data);
            onUpdateUser(response.data);
            showAlert('–ë–∏–ª–µ—Ç —Å–æ–±—Ä–∞–Ω!', 'success');
        } catch (error) {
            showAlert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏', 'error');
        }
    };

    const handleSpin = async () => {
        if (localUser.tickets < 1 || isSpinning) return;
        setIsSpinning(true);
        setWinAmount(null);

        // –ê–Ω–∏–º–∞—Ü–∏—è —Ä—ã—á–∞–≥–∞
        leverRef.current.classList.add(styles.leverPulled);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
        const reels = [reel1Ref.current, reel2Ref.current, reel3Ref.current];
        reels.forEach(reel => {
            reel.style.transition = 'none'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º transition –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ "—Å–±—Ä–æ—Å–∞"
            reel.style.transform = `translateY(0)`;
        });

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ–ª –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–±—Ä–æ—Å
        setTimeout(async () => {
            reels.forEach(reel => {
                reel.style.transition = 'transform 4s cubic-bezier(0.25, 1, 0.5, 1)';
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–∞–ª–µ–∫–æ –≤–Ω–∏–∑—É
                const randomOffset = Math.floor(Math.random() * reelSymbols.length);
                const totalHeight = reel.scrollHeight;
                const finalPosition = totalHeight - ((totalHeight / reelSymbols.length) * (randomOffset + 1));
                reel.style.transform = `translateY(-${finalPosition}px)`;
            });

            try {
                const response = await spinRoulette();
                const { prize_won, new_balance, new_tickets } = response.data;
                const updatedUser = { ...localUser, balance: new_balance, tickets: new_tickets };
                
                // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
                setTimeout(() => {
                    setLocalUser(updatedUser);
                    onUpdateUser(updatedUser);
                    setWinAmount(prize_won);
                    
                    // "–î–æ–∫—Ä—É—á–∏–≤–∞–µ–º" —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞—Ä–∞–±–∞–Ω –¥–æ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∏–∫–æ–Ω–∫–∏
                    const prizeIcon = PRIZES[prize_won];
                    const prizeIndex = reelSymbols.lastIndexOf(prizeIcon); // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –Ω—É–∂–Ω–æ–π –∏–∫–æ–Ω–∫–∏
                    
                    const iconHeight = reel2Ref.current.scrollHeight / reelSymbols.length;
                    const stopPosition = prizeIndex * iconHeight;

                    reel2Ref.current.style.transition = 'transform 1s ease-out';
                    reel2Ref.current.style.transform = `translateY(-${stopPosition}px)`;
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä—ã—á–∞–≥ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
                    leverRef.current.classList.remove(styles.leverPulled);

                    setIsSpinning(false);
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–µ–Ω—Ç—É
                    getRouletteHistory().then(res => setHistory(res.data));
                }, 4000); // 4 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ

            } catch (error) {
                showAlert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏', 'error');
                leverRef.current.classList.remove(styles.leverPulled);
                setIsSpinning(false);
            }
        }, 100);
    };

    return (
        <PageLayout title="–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞">
            <div className={styles.infoIcon} onClick={() => setInfoVisible(!infoVisible)}><FaInfoCircle /></div>
            {infoVisible && (
                <div className={styles.infoModal}>
                    <p>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ "—Å–ø–∞—Å–∏–±–∫–∏", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —á–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤ (1 –ø–µ—Ä–µ–≤–æ–¥ = 1 —á–∞—Å—Ç—å).</p>
                    <p>–°–æ–±–µ—Ä–∏—Ç–µ 2 —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 1 –±–∏–ª–µ—Ç –¥–ª—è –∏–≥—Ä—ã.</p>
                </div>
            )}

            <div className={styles.userBalance}>
                <div className={styles.balanceBox}>
                    <span>–ß–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤</span>
                    <strong>{localUser.ticket_parts} / 2</strong>
                </div>
                <button onClick={handleAssemble} disabled={localUser.ticket_parts < 2}>–°–æ–±—Ä–∞—Ç—å</button>
                <div className={styles.balanceBox}>
                    <span>–ë–∏–ª–µ—Ç—ã</span>
                    <strong>{localUser.tickets}</strong>
                </div>
            </div>

            {/* --- –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –°–õ–û–¢-–ú–ê–®–ò–ù–´ --- */}
            <div className={styles.slotMachine}>
                <div className={styles.reelsContainer}>
                    {[reel1Ref, reel2Ref, reel3Ref].map((ref, i) => (
                        <div key={i} className={styles.reel}>
                            <div className={styles.reelTrack} ref={ref}>
                                {/* –î—É–±–ª–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */}
                                {[...reelSymbols, ...reelSymbols].map((symbol, index) => (
                                    <div key={index} className={styles.symbol}>
                                        <img src={symbol} alt="symbol" />
                                    </div>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
                <div ref={leverRef} className={styles.lever} onClick={handleSpin}>
                    <div className={styles.leverStick}></div>
                    <div className={styles.leverBall}></div>
                </div>
            </div>
            
            {winAmount !== null && <div className={styles.winMessage}>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winAmount} —Å–ø–∞—Å–∏–±–æ–∫! üéâ</div>}
            
            <div className={styles.history}>
                <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏</h3>
                {history.length > 0 ? history.map(win => (
                    <div key={win.id} className={styles.historyItem}>
                        <span>{win.user.first_name}</span>
                        <strong>–≤—ã–∏–≥—Ä–∞–ª(–∞) {win.amount} —Å–ø–∞—Å–∏–±–æ–∫</strong>
                    </div>
                )) : <p>–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–ª.</p>}
            </div>
        </PageLayout>
    );
}

export default RoulettePage;
