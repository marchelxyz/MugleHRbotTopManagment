// frontend/src/pages/RoulettePage.jsx

import React, { useState, useEffect, useRef } from 'react';
import PageLayout from '../components/PageLayout';
import { spinRoulette, assembleTickets, getRouletteHistory } from '../api';
import styles from './RoulettePage.module.css';
import { FaInfoCircle } from 'react-icons/fa';

// –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–∑—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–µ–Ω—Ç–µ
const PRIZES = [17, 5, 12, 1, 30, 8, 19, 3, 23, 28, 14, 9, 21, 4, 7, 20, 25, 10, 2, 29, 11, 18, 13, 6, 26, 27, 24, 15, 22, 16];

function RoulettePage({ user, onUpdateUser }) { // –ü—Ä–∏–Ω–∏–º–∞–µ–º onUpdateUser –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  const [localUser, setLocalUser] = useState(user);
  const [history, setHistory] = useState([]);
  const [isSpinning, setIsSpinning] = useState(false);
  const [spinResult, setSpinResult] = useState(null);
  const [infoVisible, setInfoVisible] = useState(false);
  const rouletteTrackRef = useRef(null);

  useEffect(() => {
    getRouletteHistory().then(res => setHistory(res.data));
  }, []);

  const handleAssemble = async () => {
    if (localUser.ticket_parts < 2) return;
    try {
      const response = await assembleTickets();
      setLocalUser(response.data); // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      onUpdateUser(response.data); // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    } catch (error) {
      alert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏');
    }
  };

  const handleSpin = async () => {
    if (localUser.tickets < 1 || isSpinning) return;
    setIsSpinning(true);
    setSpinResult(null);
    
    const track = rouletteTrackRef.current;
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    track.style.transition = 'none';
    track.style.transform = 'translateX(0)';

    try {
      const response = await spinRoulette();
      const { prize_won, new_balance, new_tickets } = response.data;
      
      const updatedUser = { ...localUser, balance: new_balance, tickets: new_tickets };
      setLocalUser(updatedUser);
      onUpdateUser(updatedUser);

      // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—Ä–∏–∑–µ ---
      setTimeout(() => {
        const prizeItemWidth = 80; // –®–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏ –∏–∑ CSS
        const prizeArrayForAnimation = [...PRIZES, ...PRIZES, ...PRIZES];

        // –ò—â–µ–º –∏–Ω–¥–µ–∫—Å –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–∏–∑–∞ –≥–¥–µ-—Ç–æ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ª–µ–Ω—Ç—ã –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        let targetIndex = -1;
        for (let i = PRIZES.length; i < PRIZES.length * 2; i++) {
            if (prizeArrayForAnimation[i] === prize_won) {
                targetIndex = i;
                break;
            }
        }
        // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞—à–ª–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π), –∏—â–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
        if (targetIndex === -1) {
            targetIndex = prizeArrayForAnimation.indexOf(prize_won);
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        // (–ò–Ω–¥–µ–∫—Å * –®–∏—Ä–∏–Ω—É) - (–®–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ / 2) + (–®–∏—Ä–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ / 2)
        const containerWidth = track.parentElement.offsetWidth;
        const stopPosition = (targetIndex * prizeItemWidth) - (containerWidth / 2) + (prizeItemWidth / 2);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Å–ª—É—á–∞–π–Ω—ã–π —Å–¥–≤–∏–≥, —á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
        const randomOffset = Math.random() * 40 - 20;
        const finalPosition = stopPosition + randomOffset;

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏
        track.style.transition = 'transform 4s cubic-bezier(.15,.56,.33,1.03)';
        track.style.transform = `translateX(-${finalPosition}px)`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
          setSpinResult(prize_won);
          setIsSpinning(false);
          getRouletteHistory().then(res => setHistory(res.data));
        }, 4100); // –ß—É—Ç—å –¥–æ–ª—å—à–µ, —á–µ–º –∞–Ω–∏–º–∞—Ü–∏—è
      }, 100);
      // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---

    } catch (error) {
      alert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏');
      setIsSpinning(false);
    }
  };

  return (
    <PageLayout title="–†—É–ª–µ—Ç–∫–∞">
      <div className={styles.infoIcon} onClick={() => setInfoVisible(!infoVisible)}>
        <FaInfoCircle />
      </div>

      {infoVisible && (
        <div className={styles.infoModal}>
          <p>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ "—Å–ø–∞—Å–∏–±–∫–∏" –∫–æ–ª–ª–µ–≥–∞–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —á–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤ (1 –ø–µ—Ä–µ–≤–æ–¥ = 1 —á–∞—Å—Ç—å).</p>
          <p>–°–æ–±–µ—Ä–∏—Ç–µ 2 —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 1 –±–∏–ª–µ—Ç –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ä—É–ª–µ—Ç–∫–∏.</p>
          <p>–ß–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤ —Å–≥–æ—Ä–∞—é—Ç —Ä–∞–∑ –≤ 3 –º–µ—Å—è—Ü–∞, —Ü–µ–ª—ã–µ –±–∏–ª–µ—Ç—ã - —Ä–∞–∑ –≤ 4 –º–µ—Å—è—Ü–∞.</p>
        </div>
      )}

      <div className={styles.userBalance}>
        <div className={styles.balanceBox}>
          <span>–ß–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤</span>
          <strong>{localUser.ticket_parts} / 2</strong>
        </div>
        <button onClick={handleAssemble} disabled={localUser.ticket_parts < 2}>–°–æ–±—Ä–∞—Ç—å</button>
        <div className={styles.balanceBox}>
          <span>–ë–∏–ª–µ—Ç—ã</span>
          <strong>{localUser.tickets}</strong>
        </div>
      </div>

      <div className={styles.rouletteContainer}>
        <div className={styles.pointer}></div>
        <div className={styles.rouletteTrack} ref={rouletteTrackRef}>
          {[...PRIZES, ...PRIZES, ...PRIZES].map((prize, index) => (
            <div key={index} className={styles.prizeItem}>{prize}</div>
          ))}
        </div>
      </div>

      {spinResult && <div className={styles.winMessage}>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {spinResult} —Å–ø–∞—Å–∏–±–æ–∫! üéâ</div>}

      <button onClick={handleSpin} disabled={localUser.tickets < 1 || isSpinning} className={styles.spinButton}>
        {isSpinning ? '–ö—Ä—É—Ç–∏—Ç—Å—è...' : `–ö—Ä—É—Ç–∏—Ç—å (1 –±–∏–ª–µ—Ç)`}
      </button>

      <div className={styles.history}>
        <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏</h3>
        {history.map(win => (
          <div key={win.id} className={styles.historyItem}>
            <span>{win.user.first_name} {win.user.last_name}</span>
            <strong>–≤—ã–∏–≥—Ä–∞–ª(–∞) {win.amount} —Å–ø–∞—Å–∏–±–æ–∫</strong>
          </div>
        ))}
      </div>
    </PageLayout>
  );
}

export default RoulettePage;
