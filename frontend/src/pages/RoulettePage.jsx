// frontend/src/pages/RoulettePage.jsx

import React, { useState, useEffect, useRef } from 'react';
import PageLayout from '../components/PageLayout';
import { spinRoulette, assembleTickets, getRouletteHistory } from '../api';
import styles from './RoulettePage.module.css';
import { useModalAlert } from '../contexts/ModalAlertContext';

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 30 –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–æ–≤
const reelNumbers = Array.from({ length: 30 }, (_, i) => i + 1);

function RoulettePage({ user, onUpdateUser }) {
    const { showAlert } = useModalAlert();
    const [localUser, setLocalUser] = useState(user);
    const [history, setHistory] = useState([]);
    const [isSpinning, setIsSpinning] = useState(false);
    const [winAmount, setWinAmount] = useState(null);

    const reelsRef = useRef([]);

    useEffect(() => {
        const fetchHistory = async () => {
            try {
                const res = await getRouletteHistory();
                setHistory(res.data);
            } catch (error) { console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä—É–ª–µ—Ç–∫–∏:", error); }
        };
        fetchHistory();
        const intervalId = setInterval(fetchHistory, 5000);
        return () => clearInterval(intervalId);
    }, []);

    const handleAssemble = async () => {
        if (localUser.ticket_parts < 2) return;
        try {
            const response = await assembleTickets();
            setLocalUser(response.data);
            onUpdateUser(response.data);
            showAlert('–ë–∏–ª–µ—Ç —Å–æ–±—Ä–∞–Ω!', 'success');
        } catch (error) {
            showAlert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏', 'error');
        }
    };
    
    const handleSpin = async () => {
        if (localUser.tickets < 1 || isSpinning) return;
        setIsSpinning(true);
        setWinAmount(null);
        
        reelsRef.current.forEach(reel => {
            reel.style.transition = 'none';
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞—Ä–∞–±–∞–Ω—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            const randomOffset = Math.floor(Math.random() * reelNumbers.length);
            const symbolHeight = 120; // –í—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            reel.style.transform = `translateY(-${randomOffset * symbolHeight}px)`;
        });

        try {
            const response = await spinRoulette();
            const { prize_won, new_balance, new_tickets } = response.data;
            const updatedUser = { ...localUser, balance: new_balance, tickets: new_tickets };
            
            // –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±–∞—Ä–∞–±–∞–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
            const stopReel = (reelIndex) => {
                const reel = reelsRef.current[reelIndex];
                
                // –î–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞ - –ø—Ä–∏–∑–æ–≤–æ–µ —á–∏—Å–ª–æ, –¥–ª—è –±–æ–∫–æ–≤—ã—Ö - —Å–ª—É—á–∞–π–Ω—ã–µ
                const targetNumber = reelIndex === 1 ? prize_won : reelNumbers[Math.floor(Math.random() * reelNumbers.length)];
                const targetIndex = reelNumbers.indexOf(targetNumber);
                
                const symbolHeight = 120;
                const totalHeight = reel.scrollHeight;
                const loops = 4; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
                // –ö–æ–Ω–µ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ + —Å–º–µ—â–µ–Ω–∏–µ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —á–∏—Å–ª–∞
                const finalPosition = (loops * totalHeight / 2) + (targetIndex * symbolHeight);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                reel.style.transition = `transform ${4 + reelIndex * 0.5}s cubic-bezier(.32, .95, .46, 1)`;
                reel.style.transform = `translateY(-${finalPosition}px)`;
            };

            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤
            reelsRef.current.forEach((_, index) => {
                stopReel(index);
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                setLocalUser(updatedUser);
                onUpdateUser(updatedUser);
                setWinAmount(prize_won);
                setIsSpinning(false);
                getRouletteHistory().then(res => setHistory(res.data));
            }, 5500); // –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏

        } catch (error) {
            showAlert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏', 'error');
            setIsSpinning(false);
        }
    };

    return (
        <PageLayout title="–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞">
            <div className={styles.slotMachineWrapper}>
                <div className={styles.slotMachine}>
                    {/* –í–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å */}
                    <div className={`${styles.shadow} ${styles.topShadow}`}></div>
                    {/* –ù–∏–∂–Ω—è—è —Ç–µ–Ω—å */}
                    <div className={`${styles.shadow} ${styles.bottomShadow}`}></div>
                    
                    <div className={styles.reelsContainer}>
                        {[0, 1, 2].map(i => (
                            <div key={i} className={styles.reelWrapper}>
                                <div className={styles.reelTrack} ref={el => reelsRef.current[i] = el}>
                                    {/* –î—É–±–ª–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –¥–ª—è –±–µ—Å—à–æ–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */}
                                    {[...reelNumbers, ...reelNumbers].map((number, index) => (
                                        <div key={index} className={styles.symbol}>
                                            {number}
                                        </div>
                                    ))}
                                </div>
                                <div className={`${styles.shadow} ${styles.reelShadow}`}></div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
            
            {winAmount !== null && <div className={styles.winMessage}>–í—ã–∏–≥—Ä—ã—à {winAmount} —Å–ø–∞—Å–∏–±–æ–∫! üéâ</div>}
            
            <button 
              className={`${styles.spinButton} ${isSpinning ? styles.spinning : ''}`} 
              onClick={handleSpin} 
              disabled={isSpinning || localUser.tickets < 1}
            >
                SPIN
            </button>
            
            <div className={styles.history}>
                <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏</h3>
                {history.length > 0 ? history.map(win => (
                    <div key={win.id} className={styles.historyItem}>
                        <span>{win.user.first_name}</span>
                        <strong>–≤—ã–∏–≥—Ä–∞–ª(–∞) {win.amount} —Å–ø–∞—Å–∏–±–æ–∫</strong>
                    </div>
                )) : <p>–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–ª.</p>}
            </div>
        </PageLayout>
    );
}

export default RoulettePage;
