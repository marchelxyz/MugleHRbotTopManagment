// frontend/src/pages/RoulettePage.jsx

import React, { useState, useEffect, useRef } from 'react';
import PageLayout from '../components/PageLayout';
import { spinRoulette, assembleTickets, getRouletteHistory } from '../api';
import styles from './RoulettePage.module.css';
import { useModalAlert } from '../contexts/ModalAlertContext';

const reelNumbers = Array.from({ length: 30 }, (_, i) => i + 1);

function RoulettePage({ user, onUpdateUser }) {
    const { showAlert } = useModalAlert();
    const [localUser, setLocalUser] = useState(user);
    const [history, setHistory] = useState([]);
    const [isSpinning, setIsSpinning] = useState(false);
    const [winAmount, setWinAmount] = useState(null);

    const reelsRef = useRef([]);

    useEffect(() => {
        const fetchHistory = async () => {
            try {
                const res = await getRouletteHistory();
                setHistory(res.data);
            } catch (error) { console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä—É–ª–µ—Ç–∫–∏:", error); }
        };
        fetchHistory();
        const intervalId = setInterval(fetchHistory, 5000);
        return () => clearInterval(intervalId);
    }, []);

    const handleAssemble = async () => {
        if (localUser.ticket_parts < 2) return;
        try {
            const response = await assembleTickets();
            setLocalUser(response.data);
            onUpdateUser(response.data);
            showAlert('–ë–∏–ª–µ—Ç —Å–æ–±—Ä–∞–Ω!', 'success');
        } catch (error) {
            showAlert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏', 'error');
        }
    };
    
    // --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–ù–ò–ú–ê–¶–ò–ò ---
    const handleSpin = async () => {
        if (localUser.tickets < 1 || isSpinning) return;
        setIsSpinning(true);
        setWinAmount(null);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞—Ä–∞–±–∞–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        reelsRef.current.forEach(reel => {
            reel.style.transition = 'none';
        });

        try {
            const response = await spinRoulette();
            const { prize_won, new_balance, new_tickets } = response.data;
            const updatedUser = { ...localUser, balance: new_balance, tickets: new_tickets };
            
            const totalAnimationTime = 5000; // –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
            reelsRef.current.forEach((reel, index) => {
                const targetNumber = prize_won;
                const targetIndex = reelNumbers.indexOf(targetNumber);
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É —Å–∏–º–≤–æ–ª–∞ –∏–∑ CSS
                const symbolHeight = 120; 
                const totalSymbols = reelNumbers.length;
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                // 5 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ + –ø–æ–∑–∏—Ü–∏—è –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —á–∏—Å–ª–∞
                const totalDistance = 5 * totalSymbols * symbolHeight + (targetIndex * symbolHeight);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º transition —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
                const animationDuration = (totalAnimationTime / 1000) - (reelsRef.current.length - 1 - index) * 0.3;
                reel.style.transition = `transform ${animationDuration}s cubic-bezier(0.25, 1, 0.5, 1)`;
                reel.style.transform = `translateY(-${totalDistance}px)`;
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—é –ü–û–°–õ–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                setLocalUser(updatedUser);
                onUpdateUser(updatedUser);
                setWinAmount(prize_won);
                setIsSpinning(false);
                getRouletteHistory().then(res => setHistory(res.data));
            }, totalAnimationTime);

        } catch (error) {
            showAlert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏', 'error');
            setIsSpinning(false);
        }
    };

    return (
        <PageLayout title="–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞">
            <div className={styles.slotMachine}>
                <div className={styles.reelsContainer}>
                    {[0, 1, 2].map(i => (
                        <div key={i} className={styles.reelWrapper}>
                            <div className={styles.reelTrack} ref={el => reelsRef.current[i] = el}>
                                {/* –°–æ–∑–¥–∞–µ–º 10 –∫–æ–ø–∏–π —á–∏—Å–µ–ª –¥–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–π –ª–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "–ø—Ä–æ–ø–∞–¥–∞–Ω–∏—è" */}
                                {Array(10).fill(reelNumbers).flat().map((number, index) => (
                                    <div key={index} className={styles.symbol}>
                                        {number}
                                    </div>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
            </div>
            
            {winAmount !== null && <div className={styles.winMessage}>–í—ã–∏–≥—Ä—ã—à {winAmount} —Å–ø–∞—Å–∏–±–æ–∫! üéâ</div>}
            
            <button 
              className={`${styles.spinButton} ${isSpinning ? styles.spinning : ''}`} 
              onClick={handleSpin} 
              disabled={isSpinning || localUser.tickets < 1}
            >
                SPIN
            </button>
            
            <div className={styles.history}>
                <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏</h3>
                {history.length > 0 ? history.map(win => (
                    <div key={win.id} className={styles.historyItem}>
                        <span>{win.user.first_name}</span>
                        <strong>–≤—ã–∏–≥—Ä–∞–ª(–∞) {win.amount} —Å–ø–∞—Å–∏–±–æ–∫</strong>
                    </div>
                )) : <p>–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–ª.</p>}
            </div>
        </PageLayout>
    );
}

export default RoulettePage;
