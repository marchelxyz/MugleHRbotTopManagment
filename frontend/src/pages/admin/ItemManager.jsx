// frontend/src/pages/admin/ItemManager.jsx

import React, { useState, useEffect, useMemo } from 'react';
import { clearCache } from '../../storage'; 
// 1. –£–±–∏—Ä–∞–µ–º uploadItemImage –∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
import { createMarketItem, getAllMarketItems, updateMarketItem, archiveMarketItem, getArchivedMarketItems, restoreMarketItem } from '../../api';
import styles from '../AdminPage.module.css';
import { FaArchive } from 'react-icons/fa';
import { useModalAlert } from '../../contexts/ModalAlertContext';
import { useConfirmation } from '../../contexts/ConfirmationContext';

// ... (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)

const initialItemState = { name: '', description: '', price_rub: '', stock: 1, image_url: '' };

function ItemManager() {
  const { showAlert } = useModalAlert();
  const { confirm } = useConfirmation();
  const [view, setView] = useState('active');
  const [items, setItems] = useState([]);
  const [archivedItems, setArchivedItems] = useState([]);
  const [form, setForm] = useState(initialItemState);
  const [editingItemId, setEditingItemId] = useState(null);
  const [loading, setLoading] = useState(false);
  // 2. –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ uploading

  useEffect(() => { fetchItems(); }, []);
  const fetchItems = async () => { /* ... */ };
  const calculatedPrice = useMemo(() => calculateSpasibkiPrice(form.price_rub), [form.price_rub]);
  const forecast = useMemo(() => calculateAccumulationForecast(calculatedPrice), [calculatedPrice]);

  const handleFormChange = (e) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  // 3. –£–¥–∞–ª—è–µ–º –≤—Å—é —Ñ—É–Ω–∫—Ü–∏—é handleImageUpload

  const handleFormSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    // –¢–µ–ø–µ—Ä—å image_url –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
    const itemData = {
      ...form,
      price: calculateSpasibkiPrice(form.price_rub),
      price_rub: parseInt(form.price_rub, 10),
      stock: parseInt(form.stock, 10),
    };
    try {
      if (editingItemId) {
        await updateMarketItem(editingItemId, itemData);
        showAlert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
      } else {
        await createMarketItem(itemData);
        showAlert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
      }
      resetForm();
      fetchItems();
      clearCache('market');
    } catch (error) {
      showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (item) => { /* ... */ };
  const resetForm = () => { /* ... */ };
  const handleArchive = async (itemId) => { /* ... */ };
  const handleRestore = async (itemId) => { /* ... */ };

  return (
    <>
      <div className={styles.card}>
        <h2>{editingItemId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä'}</h2>
        <form onSubmit={handleFormSubmit}>
          {/* 4. –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ */}
          <div className={styles.imageUploader}>
            {form.image_url ? (
              <img src={form.image_url} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" className={styles.imagePreview} />
            ) : (
              <div className={styles.imagePlaceholder}>–§–æ—Ç–æ</div>
            )}
          </div>
          <input 
            type="text" 
            name="image_url" 
            value={form.image_url} 
            onChange={handleFormChange} 
            placeholder="–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" 
            className={styles.input} 
          />
          
          <input type="text" name="name" value={form.name} onChange={handleFormChange} placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" className={styles.input} required />
          <textarea name="description" value={form.description} onChange={handleFormChange} placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" className={styles.textarea} />
          <input type="number" name="price_rub" value={form.price_rub} onChange={handleFormChange} placeholder="–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö" className={styles.input} required min="0" />
          
          {form.price_rub > 0 && ( /* ... */ )}
            
          <input type="number" name="stock" value={form.stock} onChange={handleFormChange} placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ" className={styles.input} required min="0" />
          <button type="submit" disabled={loading} className={styles.buttonGreen}>
            {editingItemId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
          </button>
          {editingItemId && <button type="button" onClick={resetForm} className={styles.buttonGrey}>–û—Ç–º–µ–Ω–∞</button>}
        </form>
      </div>
      
      <div className={styles.tabs}>
        <button onClick={() => setView('active')} className={view === 'active' ? styles.tabActive : styles.tab}>–ê–∫—Ç–∏–≤–Ω—ã–µ ({items.length})</button>
        <button onClick={() => setView('archived')} className={view === 'archived' ? styles.tabActive : styles.tab}>–ê—Ä—Ö–∏–≤ ({archivedItems.length})</button>
      </div>

      <div className={styles.card}>
        <h2>{view === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã' : '–ê—Ä—Ö–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤'}</h2>
        <div className={styles.list}>
          {(view === 'active' ? items : archivedItems).map(item => (
            <div key={item.id} className={styles.listItem}>
              {/* 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º image_url –ù–ê–ü–†–Ø–ú–£–Æ –∏ –∑–¥–µ—Å—å */}
              {item.image_url && <img src={item.image_url} alt={item.name} className={styles.listItemImage} />}
              <div className={styles.listItemContent}>
                <p><strong>{item.name}</strong></p>
                <p>–¶–µ–Ω–∞: {item.price} —Å–ø–∞—Å–∏–±–æ–∫ ({item.price_rub} ‚ÇΩ)</p>
                <p>–û—Å—Ç–∞—Ç–æ–∫: {item.stock} —à—Ç.</p>
              </div>
              <div className={styles.listItemActions}>
                {view === 'active' ? (
                  <>
                    <button onClick={() => handleEdit(item)} className={styles.buttonSmall}>‚úèÔ∏è</button>
                    <button onClick={() => handleArchive(item.id)} className={styles.buttonSmallRed}>üóëÔ∏è</button>
                  </>
                ) : (
                  <button onClick={() => handleRestore(item.id)} className={styles.buttonSmall}><FaArchive /> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </>
  );
}

export default ItemManager;
