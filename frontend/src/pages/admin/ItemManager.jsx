// frontend/src/pages/admin/ItemManager.jsx

import React, { useState, useEffect, useMemo } from 'react';
import { createMarketItem, getAllMarketItems, updateMarketItem, archiveMarketItem, getArchivedMarketItems, restoreMarketItem } from '../../api';
import styles from '../AdminPage.module.css';
import { FaArchive } from 'react-icons/fa'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É

// --- –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
function calculateSpasibkiPrice(priceRub) {
    if (!priceRub || priceRub <= 0) return 0;

    const minRub = 100;
    const maxRub = 150000;
    const minRate = 30;
    const maxRate = 150;

    if (priceRub <= minRub) {
        return Math.round(priceRub / minRate);
    }
    if (priceRub >= maxRub) {
        return Math.round(priceRub / maxRate);
    }

    const lnMinRub = Math.log(minRub);
    const lnMaxRub = Math.log(maxRub);
    const lnPriceRub = Math.log(priceRub);

    const progress = (lnPriceRub - lnMinRub) / (lnMaxRub - lnMinRub);
    const currentRate = minRate + (maxRate - minRate) * progress;
    const priceSpasibki = priceRub / currentRate;

    return Math.round(priceSpasibki);
}

function calculateAccumulationForecast(priceSpasibki) {
    if (!priceSpasibki || priceSpasibki <= 0) return "-";
    const monthsNeeded = priceSpasibki / 15;
    if (monthsNeeded <= 1) return "–æ–∫–æ–ª–æ 1 –º–µ—Å—è—Ü–∞";
    if (monthsNeeded <= 18) return `–æ–∫–æ–ª–æ ${Math.round(monthsNeeded)} –º–µ—Å.`;
    const years = (monthsNeeded / 12).toFixed(1);
    return `–æ–∫–æ–ª–æ ${years} –ª–µ—Ç`;
}
// --------------------------------------------------------------------

const initialItemState = { name: '', description: '', price_rub: '', stock: 1 };

function ItemManager() {
  const [view, setView] = useState('active'); // 'active' –∏–ª–∏ 'archived'
  const [items, setItems] = useState([]);
  const [archivedItems, setArchivedItems] = useState([]);
  
  const [form, setForm] = useState(initialItemState);
  const [editingItemId, setEditingItemId] = useState(null);
  
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    fetchItems();
  }, []);

  const fetchItems = async () => {
    setLoading(true);
    try {
      const [activeRes, archivedRes] = await Promise.all([
        getAllMarketItems(),
        getArchivedMarketItems()
      ]);
      setItems(activeRes.data);
      setArchivedItems(archivedRes.data);
    } catch (error) {
      setMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.');
    } finally {
      setLoading(false);
    }
  };
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
  const calculatedPrice = useMemo(() => calculateSpasibkiPrice(form.price_rub), [form.price_rub]);
  const forecast = useMemo(() => calculateAccumulationForecast(calculatedPrice), [calculatedPrice]);

  const handleFormChange = (e) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage('');
    const itemData = {
      ...form,
      price_rub: parseInt(form.price_rub, 10),
      stock: parseInt(form.stock, 10),
    };
    try {
      if (editingItemId) {
        await updateMarketItem(editingItemId, itemData);
        setMessage('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      } else {
        await createMarketItem(itemData);
        setMessage('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      }
      resetForm();
      fetchItems();
    } catch (error) {
      setMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (item) => {
    setEditingItemId(item.id);
    setForm({
      name: item.name,
      description: item.description,
      price_rub: item.price_rub,
      stock: item.stock,
    });
    window.scrollTo(0, 0);
  };

  const resetForm = () => {
    setForm(initialItemState);
    setEditingItemId(null);
  };

  const handleArchive = async (itemId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
      await archiveMarketItem(itemId);
      fetchItems();
    }
  };

  const handleRestore = async (itemId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
      await restoreMarketItem(itemId);
      fetchItems();
    }
  };

  return (
    <>
      <div className={styles.card}>
        <h2>{editingItemId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä'}</h2>
        <form onSubmit={handleFormSubmit}>
          <input type="text" name="name" value={form.name} onChange={handleFormChange} placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" className={styles.input} required />
          <textarea name="description" value={form.description} onChange={handleFormChange} placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" className={styles.textarea} />
          <input type="number" name="price_rub" value={form.price_rub} onChange={handleFormChange} placeholder="–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö" className={styles.input} required min="0" />
          
          {form.price_rub > 0 && (
            <div className={styles.pricePreview}>
              <p>–¶–µ–Ω–∞ –≤ —Å–ø–∞—Å–∏–±–∫–∞—Ö: <strong>{calculatedPrice}</strong></p>
              <p>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: <strong>{forecast}</strong></p>
            </div>
          )}
          
          <input type="number" name="stock" value={form.stock} onChange={handleFormChange} placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ" className={styles.input} required min="0" />
          <button type="submit" disabled={loading} className={styles.buttonGreen}>
            {editingItemId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
          </button>
          {editingItemId && <button type="button" onClick={resetForm} className={styles.buttonGrey}>–û—Ç–º–µ–Ω–∞</button>}
          {message && <p className={styles.message}>{message}</p>}
        </form>
      </div>
      
      <div className={styles.tabs}>
        <button onClick={() => setView('active')} className={view === 'active' ? styles.tabActive : styles.tab}>–ê–∫—Ç–∏–≤–Ω—ã–µ ({items.length})</button>
        <button onClick={() => setView('archived')} className={view === 'archived' ? styles.tabActive : styles.tab}>–ê—Ä—Ö–∏–≤ ({archivedItems.length})</button>
      </div>

      <div className={styles.card}>
        <h2>{view === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã' : '–ê—Ä—Ö–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤'}</h2>
        <div className={styles.list}>
          {(view === 'active' ? items : archivedItems).map(item => (
            <div key={item.id} className={styles.listItem}>
              <div className={styles.listItemContent}>
                <p><strong>{item.name}</strong></p>
                <p>–¶–µ–Ω–∞: {item.price} —Å–ø–∞—Å–∏–±–æ–∫ ({item.price_rub} ‚ÇΩ)</p>
                <p>–û—Å—Ç–∞—Ç–æ–∫: {item.stock} —à—Ç.</p>
              </div>
              <div className={styles.listItemActions}>
                {view === 'active' ? (
                  <>
                    <button onClick={() => handleEdit(item)} className={styles.buttonSmall}>‚úèÔ∏è</button>
                    <button onClick={() => handleArchive(item.id)} className={styles.buttonSmallRed}>üóëÔ∏è</button>
                  </>
                ) : (
                  <button onClick={() => handleRestore(item.id)} className={styles.buttonSmall}><FaArchive /> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </>
  );
}

export default ItemManager;
