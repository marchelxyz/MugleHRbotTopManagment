// frontend/src/pages/admin/ItemManager.jsx

import React, { useState, useEffect, useMemo } from 'react';
import { clearCache } from '../../storage'; 
import { createMarketItem, getAllMarketItems, updateMarketItem, archiveMarketItem, getArchivedMarketItems, restoreMarketItem, uploadItemImage } from '../../api';
import styles from '../AdminPage.module.css';
import { FaArchive } from 'react-icons/fa';
import { useModalAlert } from '../../contexts/ModalAlertContext';
import { useConfirmation } from '../../contexts/ConfirmationContext';

// --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function calculateSpasibkiPrice(priceRub) {
    if (!priceRub || priceRub <= 0) return 0;
    return Math.round(priceRub / 50);
}

function calculateAccumulationForecast(priceSpasibki) {
    if (!priceSpasibki || priceSpasibki <= 0) return "-";
    const monthsNeeded = priceSpasibki / 15;
    if (monthsNeeded <= 1) return "–æ–∫–æ–ª–æ 1 –º–µ—Å—è—Ü–∞";
    if (monthsNeeded <= 18) return `–æ–∫–æ–ª–æ ${Math.round(monthsNeeded)} –º–µ—Å.`;
    const years = (monthsNeeded / 12).toFixed(1);
    return `–æ–∫–æ–ª–æ ${years} –ª–µ—Ç`;
}
// --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

const initialItemState = { name: '', description: '', price_rub: '', stock: 1, image_url: '' };

function ItemManager() {
  const { showAlert } = useModalAlert();
  const { confirm } = useConfirmation();
  const [view, setView] = useState('active');
  const [items, setItems] = useState([]);
  const [archivedItems, setArchivedItems] = useState([]);
  const [form, setForm] = useState(initialItemState);
  const [editingItemId, setEditingItemId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [uploading, setUploading] = useState(false);

  useEffect(() => {
    fetchItems();
  }, []);

  const fetchItems = async () => {
    setLoading(true);
    try {
      const [activeRes, archivedRes] = await Promise.all([
        getAllMarketItems(),
        getArchivedMarketItems()
      ]);
      setItems(activeRes.data);
      setArchivedItems(archivedRes.data);
    } catch (error) {
      showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.', 'error');
    } finally {
      setLoading(false);
    }
  };
  
  const calculatedPrice = useMemo(() => calculateSpasibkiPrice(form.price_rub), [form.price_rub]);
  const forecast = useMemo(() => calculateAccumulationForecast(calculatedPrice), [calculatedPrice]);

  const handleFormChange = (e) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  const handleImageUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;
    setUploading(true);
    try {
      const response = await uploadItemImage(file);
      setForm(prev => ({ ...prev, image_url: response.data.url }));
    } catch (error) {
      showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.', 'error');
    } finally {
      setUploading(false);
    }
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    const itemData = {
      ...form,
      price_rub: parseInt(form.price_rub, 10),
      stock: parseInt(form.stock, 10),
    };
    try {
      if (editingItemId) {
        await updateMarketItem(editingItemId, itemData);
        showAlert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
      } else {
        await createMarketItem(itemData);
        showAlert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
      }
      resetForm();
      fetchItems();
      clearCache('market'); // 2. –û—á–∏—â–∞–µ–º –∫—ç—à –º–∞–≥–∞–∑–∏–Ω–∞!
    } catch (error) {
      showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (item) => {
    setEditingItemId(item.id);
    setForm({
      name: item.name,
      description: item.description,
      price_rub: item.price_rub,
      stock: item.stock,
      image_url: item.image_url || '',
    });
    window.scrollTo(0, 0);
  };

  const resetForm = () => {
    setForm(initialItemState);
    setEditingItemId(null);
  };

  const handleArchive = async (itemId) => {
    const isConfirmed = await confirm('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?');
    if (isConfirmed) {
      await archiveMarketItem(itemId);
      showAlert('–¢–æ–≤–∞—Ä –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.', 'success');
      fetchItems();
    }
  };

  const handleRestore = async (itemId) => {
    const isConfirmed = await confirm('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?');
    if (isConfirmed) {
      await restoreMarketItem(itemId);
      showAlert('–¢–æ–≤–∞—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.', 'success');
      fetchItems();
    }
  };

  return (
    <>
      <div className={styles.card}>
        <h2>{editingItemId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä'}</h2>
        <form onSubmit={handleFormSubmit}>
          <div className={styles.imageUploader}>
            {/* --- 2. –°–¢–†–û–ò–ú –ü–û–õ–ù–£–Æ –°–°–´–õ–ö–£ –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï --- */}
            {form.image_url ? (
              <img src={item.image_url}${form.image_url}`} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" className={styles.imagePreview} />
            ) : (
              <div className={styles.imagePlaceholder}>300x300</div>
            )}
            <input type="file" id="imageUpload" onChange={handleImageUpload} accept="image/png, image/jpeg" style={{ display: 'none' }} />
            <label htmlFor="imageUpload" className={styles.buttonGrey}>
              {uploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ'}
            </label>
          </div>
          <input type="text" name="name" value={form.name} onChange={handleFormChange} placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" className={styles.input} required />
          <textarea name="description" value={form.description} onChange={handleFormChange} placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" className={styles.textarea} />
          <input type="number" name="price_rub" value={form.price_rub} onChange={handleFormChange} placeholder="–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö" className={styles.input} required min="0" />
          
          {form.price_rub > 0 && (
            <div className={styles.pricePreview}>
              <p>–¶–µ–Ω–∞ –≤ —Å–ø–∞—Å–∏–±–∫–∞—Ö: <strong>{calculatedPrice}</strong></p>
              <p>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: <strong>{forecast}</strong></p>
            </div>
          )}
            
          <input type="number" name="stock" value={form.stock} onChange={handleFormChange} placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ" className={styles.input} required min="0" />
          <button type="submit" disabled={loading || uploading} className={styles.buttonGreen}>
            {editingItemId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
          </button>
          {editingItemId && <button type="button" onClick={resetForm} className={styles.buttonGrey}>–û—Ç–º–µ–Ω–∞</button>}
        </form>
      </div>
      
      <div className={styles.tabs}>
        <button onClick={() => setView('active')} className={view === 'active' ? styles.tabActive : styles.tab}>–ê–∫—Ç–∏–≤–Ω—ã–µ ({items.length})</button>
        <button onClick={() => setView('archived')} className={view === 'archived' ? styles.tabActive : styles.tab}>–ê—Ä—Ö–∏–≤ ({archivedItems.length})</button>
      </div>

      <div className={styles.card}>
        <h2>{view === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã' : '–ê—Ä—Ö–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤'}</h2>
        <div className={styles.list}>
          {(view === 'active' ? items : archivedItems).map(item => (
            <div key={item.id} className={styles.listItem}>
              {item.image_url && <img src={item.image_url} alt={item.name} className={styles.listItemImage} />}
              <div className={styles.listItemContent}>
                <p><strong>{item.name}</strong></p>
                <p>–¶–µ–Ω–∞: {item.price} —Å–ø–∞—Å–∏–±–æ–∫ ({item.price_rub} ‚ÇΩ)</p>
                <p>–û—Å—Ç–∞—Ç–æ–∫: {item.stock} —à—Ç.</p>
              </div>
              <div className={styles.listItemActions}>
                {view === 'active' ? (
                  <>
                    <button onClick={() => handleEdit(item)} className={styles.buttonSmall}>‚úèÔ∏è</button>
                    <button onClick={() => handleArchive(item.id)} className={styles.buttonSmallRed}>üóëÔ∏è</button>
                  </>
                ) : (
                  <button onClick={() => handleRestore(item.id)} className={styles.buttonSmall}><FaArchive /> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </>
  );
}

export default ItemManager;
