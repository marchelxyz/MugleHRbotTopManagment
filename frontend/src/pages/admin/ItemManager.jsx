// frontend/src/pages/admin/ItemManager.jsx

import React, { useState, useEffect, useMemo } from 'react';
import { clearCache } from '../../storage'; 
// –£–±–∏—Ä–∞–µ–º uploadItemImage, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
import { createMarketItem, getAllMarketItems, updateMarketItem, archiveMarketItem, getArchivedMarketItems, restoreMarketItem } from '../../api';
import styles from '../AdminPage.module.css';
import { FaArchive } from 'react-icons/fa';
import { useModalAlert } from '../../contexts/ModalAlertContext';
import { useConfirmation } from '../../contexts/ConfirmationContext';

const initialItemState = { name: '', description: '', price_rub: '', stock: 1, image_url: '' };

function ItemManager() {
  const { showAlert } = useModalAlert();
  const { confirm } = useConfirmation();
  const [view, setView] = useState('active');
  const [items, setItems] = useState([]);
  const [archivedItems, setArchivedItems] = useState([]);
  const [form, setForm] = useState(initialItemState);
  const [editingItemId, setEditingItemId] = useState(null);
  const [loading, setLoading] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const fetchItems = async () => {
    setLoading(true);
    try {
        const [activeRes, archivedRes] = await Promise.all([
            getAllMarketItems(),
            getArchivedMarketItems()
        ]);
        setItems(activeRes.data);
        setArchivedItems(archivedRes.data);
    } catch (error) {
        showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã.', 'error');
    } finally {
        setLoading(false);
    }
  };

  useEffect(() => {
    fetchItems();
  }, []);
  
  // –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const calculatedPrice = useMemo(() => {
      if (!form.price_rub || form.price_rub <= 0) return 0;
      return Math.round(form.price_rub / 50);
  }, [form.price_rub]);

  const forecast = useMemo(() => {
      if (!calculatedPrice || calculatedPrice <= 0) return "-";
      const monthsNeeded = calculatedPrice / 15;
      if (monthsNeeded <= 1) return "–æ–∫–æ–ª–æ 1 –º–µ—Å—è—Ü–∞";
      if (monthsNeeded <= 18) return `–æ–∫–æ–ª–æ ${Math.round(monthsNeeded)} –º–µ—Å.`;
      const years = (monthsNeeded / 12).toFixed(1);
      return `–æ–∫–æ–ª–æ ${years} –ª–µ—Ç`;
  }, [calculatedPrice]);

  const handleFormChange = (e) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ "price", Pydantic –µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –∂–¥–µ—Ç
    const { price, ...itemDataToSend } = {
      ...form,
      price_rub: parseInt(form.price_rub, 10),
      stock: parseInt(form.stock, 10),
    };

    try {
      if (editingItemId) {
        await updateMarketItem(editingItemId, itemDataToSend);
        showAlert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
      } else {
        await createMarketItem(itemDataToSend);
        showAlert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
      }
      resetForm();
      fetchItems();
      clearCache('market');
    } catch (error) {
      showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (item) => {
    setEditingItemId(item.id);
    setForm({
        name: item.name,
        description: item.description || '',
        price_rub: item.price_rub,
        stock: item.stock,
        image_url: item.image_url || ''
    });
    window.scrollTo(0, 0); // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –Ω–∞–≤–µ—Ä—Ö –∫ —Ñ–æ—Ä–º–µ
  };

  const resetForm = () => {
    setForm(initialItemState);
    setEditingItemId(null);
  };
  
  const handleArchive = async (itemId) => {
    const isConfirmed = await confirm('–ê—Ä—Ö–∏–≤–∞—Ü–∏—è', '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?');
    if (isConfirmed) {
        try {
            await archiveMarketItem(itemId);
            showAlert('–¢–æ–≤–∞—Ä –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.', 'success');
            fetchItems();
            clearCache('market');
        } catch (error) {
            showAlert('–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏.', 'error');
        }
    }
  };

  const handleRestore = async (itemId) => {
    const isConfirmed = await confirm('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?');
    if (isConfirmed) {
        try {
            await restoreMarketItem(itemId);
            showAlert('–¢–æ–≤–∞—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.', 'success');
            fetchItems();
            clearCache('market');
        } catch (error) {
            showAlert('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.', 'error');
        }
    }
  };

  return (
    <>
      <div className={styles.card}>
        <h2>{editingItemId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä'}</h2>
        <form onSubmit={handleFormSubmit}>
          
          {/* --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–ª–æ–∫ –¥–ª—è URL –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ --- */}
          <div className={styles.imageUploader}>
            {form.image_url ? (
              <img 
                src={form.image_url} 
                alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" 
                className={styles.imagePreview} 
                // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–µ—Ä–∞–±–æ—á–∞—è, —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–µ—Ç –∏–∫–æ–Ω–∫—É –±–∏—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                onError={(e) => { e.target.style.display = 'none'; }} 
                onLoad={(e) => { e.target.style.display = 'block'; }}
              />
            ) : (
              <div className={styles.imagePlaceholder}>–§–æ—Ç–æ</div>
            )}
          </div>
          <input 
            type="text" 
            name="image_url" 
            value={form.image_url} 
            onChange={handleFormChange} 
            placeholder="–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (URL)" 
            className={styles.input} 
          />
          {/* --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô --- */}
          
          <input type="text" name="name" value={form.name} onChange={handleFormChange} placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" className={styles.input} required />
          <textarea name="description" value={form.description} onChange={handleFormChange} placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞" className={styles.textarea} />
          <input type="number" name="price_rub" value={form.price_rub} onChange={handleFormChange} placeholder="–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö" className={styles.input} required min="0" />
          
          {form.price_rub > 0 && (
              <div className={styles.pricePreview}>
                <p>–¶–µ–Ω–∞ –≤ —Å–ø–∞—Å–∏–±–∫–∞—Ö: <strong>{calculatedPrice}</strong></p>
                <p>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: <strong>{forecast}</strong></p>
              </div>
          )}
            
          <input type="number" name="stock" value={form.stock} onChange={handleFormChange} placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ" className={styles.input} required min="0" />
          <button type="submit" disabled={loading} className={styles.buttonGreen}>
            {editingItemId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
          </button>
          {editingItemId && <button type="button" onClick={resetForm} className={styles.buttonGrey}>–û—Ç–º–µ–Ω–∞</button>}
        </form>
      </div>
      
      <div className={styles.tabs}>
        <button onClick={() => setView('active')} className={view === 'active' ? styles.tabActive : styles.tab}>–ê–∫—Ç–∏–≤–Ω—ã–µ ({items.length})</button>
        <button onClick={() => setView('archived')} className={view === 'archived' ? styles.tabActive : styles.tab}>–ê—Ä—Ö–∏–≤ ({archivedItems.length})</button>
      </div>

      <div className={styles.card}>
        <h2>{view === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã' : '–ê—Ä—Ö–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤'}</h2>
        <div className={styles.list}>
          {(view === 'active' ? items : archivedItems).map(item => (
            <div key={item.id} className={styles.listItem}>
              {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º image_url –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —Å–ø–∏—Å–∫–µ */}
              {item.image_url && <img src={item.image_url} alt={item.name} className={styles.listItemImage} />}
              <div className={styles.listItemContent}>
                <p><strong>{item.name}</strong></p>
                <p>–¶–µ–Ω–∞: {item.price} —Å–ø–∞—Å–∏–±–æ–∫ ({item.price_rub} ‚ÇΩ)</p>
                <p>–û—Å—Ç–∞—Ç–æ–∫: {item.stock} —à—Ç.</p>
              </div>
              <div className={styles.listItemActions}>
                {view === 'active' ? (
                  <>
                    <button onClick={() => handleEdit(item)} className={styles.buttonSmall}>‚úèÔ∏è</button>
                    <button onClick={() => handleArchive(item.id)} className={styles.buttonSmallRed}>üóëÔ∏è</button>
                  </>
                ) : (
                  <button onClick={() => handleRestore(item.id)} className={styles.buttonSmall}><FaArchive /> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </>
  );
}

export default ItemManager;
