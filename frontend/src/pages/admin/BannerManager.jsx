// frontend/src/pages/admin/BannerManager.jsx

import React, { useState, useEffect } from 'react';
import { getAllBanners, createBanner, updateBanner, deleteBanner } from '../../api';
import styles from '../AdminPage.module.css'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Å—Ç–∏–ª–∏

const initialBannerState = {
  image_url: '',
  link_url: '',
  is_active: true,
  position: 'feed',
};

function BannerManager() {
  const [banners, setBanners] = useState([]);
  const [bannerForm, setBannerForm] = useState(initialBannerState);
  const [editingBannerId, setEditingBannerId] = useState(null);
  const [bannerLoading, setBannerLoading] = useState(false);
  const [bannerMessage, setBannerMessage] = useState('');

  useEffect(() => {
    fetchBanners();
  }, []);

  const fetchBanners = async () => {
    try {
      const response = await getAllBanners();
      setBanners(response.data);
    } catch (error) {
      setBannerMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–Ω–Ω–µ—Ä–æ–≤.');
    }
  };
  
  const handleBannerFormChange = (e) => {
    const { name, value, type, checked } = e.target;
    setBannerForm(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleBannerSubmit = async (e) => {
    e.preventDefault();
    setBannerLoading(true);
    setBannerMessage('');
    try {
      if (editingBannerId) {
        await updateBanner(editingBannerId, bannerForm);
        setBannerMessage('–ë–∞–Ω–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      } else {
        await createBanner(bannerForm);
        setBannerMessage('–ë–∞–Ω–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      }
      setBannerForm(initialBannerState);
      setEditingBannerId(null);
      fetchBanners();
    } catch (error) {
      setBannerMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    } finally {
      setBannerLoading(false);
    }
  };

  const handleEditBanner = (banner) => {
    setEditingBannerId(banner.id);
    setBannerForm({
      image_url: banner.image_url,
      link_url: banner.link_url || '',
      is_active: banner.is_active,
      position: banner.position || 'feed',
    });
  };

  const cancelEdit = () => {
    setEditingBannerId(null);
    setBannerForm(initialBannerState);
  };

  const handleDeleteBanner = async (bannerId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–∞–Ω–Ω–µ—Ä?')) {
      try {
        await deleteBanner(bannerId);
        setBannerMessage('–ë–∞–Ω–Ω–µ—Ä —É–¥–∞–ª–µ–Ω.');
        fetchBanners();
      } catch (error) {
        setBannerMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.');
      }
    }
  };

  return (
    <>
      <div className={styles.card}>
        <h2>{editingBannerId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä'}</h2>
        <form onSubmit={handleBannerSubmit}>
          <input type="text" name="image_url" value={bannerForm.image_url} onChange={handleBannerFormChange} placeholder="URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞" className={styles.input} required />
          <input type="text" name="link_url" value={bannerForm.link_url} onChange={handleBannerFormChange} placeholder="URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" className={styles.input} />
          <select name="position" value={bannerForm.position} onChange={handleBannerFormChange} className={styles.input}>
            <option value="feed">–ë–∞–Ω–Ω–µ—Ä –≤ –ª–µ–Ω—Ç–µ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π)</option>
            <option value="main">–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω–µ—Ä (–≤–µ—Ä—Ö–Ω–∏–π)</option>
          </select>
          <label className={styles.checkboxLabel}>
            <input type="checkbox" name="is_active" checked={bannerForm.is_active} onChange={handleBannerFormChange} />
            –ê–∫—Ç–∏–≤–µ–Ω (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
          </label>
          <button type="submit" disabled={bannerLoading} className={styles.buttonGreen}>
            {bannerLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (editingBannerId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –±–∞–Ω–Ω–µ—Ä')}
          </button>
          {editingBannerId && (<button type="button" onClick={cancelEdit} className={styles.buttonGrey}>–û—Ç–º–µ–Ω–∞</button>)}
          {bannerMessage && <p className={styles.message}>{bannerMessage}</p>}
        </form>
      </div>
      <div className={styles.card}>
        <h2>–°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤</h2>
        <div className={styles.list}>
          {banners.map(banner => (
            <div key={banner.id} className={styles.listItem}>
              <img src={banner.image_url} alt="banner" className={styles.listItemImage} />
              <div className={styles.listItemContent}>
                <p><b>–ü–æ–∑–∏—Ü–∏—è:</b> {banner.position === 'main' ? '–ì–ª–∞–≤–Ω—ã–π' : '–í –ª–µ–Ω—Ç–µ'}</p>
                <p><b>–°—Ç–∞—Ç—É—Å:</b> {banner.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –°–∫—Ä—ã—Ç'}</p>
              </div>
              <div className={styles.listItemActions}>
                <button onClick={() => handleEditBanner(banner)} className={styles.buttonSmall}>‚úèÔ∏è</button>
                <button onClick={() => handleDeleteBanner(banner.id)} className={styles.buttonSmallRed}>üóëÔ∏è</button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </>
  );
}

export default BannerManager;
