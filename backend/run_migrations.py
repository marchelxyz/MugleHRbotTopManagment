#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent))

from database import engine
from sqlalchemy import text

async def run_migrations():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ migrations"""
    migrations_dir = Path(__file__).parent / "migrations"
    
    if not migrations_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ migrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
    migration_files = sorted([f for f in migrations_dir.glob("*.sql")])
    
    if not migration_files:
        print("‚ùå –§–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(migration_files)} —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π")
    
    async with engine.begin() as conn:
        for migration_file in migration_files:
            print(f"üìÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_file.name}")
            
            try:
                with open(migration_file, 'r', encoding='utf-8') as f:
                    migration_sql = f.read()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
                await conn.execute(text(migration_sql))
                print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration_file.name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration_file.name}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π
                continue
    
    print("üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")

if __name__ == "__main__":
    asyncio.run(run_migrations())