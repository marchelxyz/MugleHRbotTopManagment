# backend/crud/shared_gifts.py

from typing import List, Optional
from datetime import datetime, date, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, desc, and_, or_
import models
import schemas
from config import settings
from bot import send_telegram_message
import uuid


async def create_shared_gift_invitation(db: AsyncSession, invitation: schemas.CreateSharedGiftInvitationRequest, user_id: int):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"""
    user = await db.get(models.User, user_id)
    if not user:
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    item = await db.get(models.MarketItem, invitation.item_id)
    if not item or not item.is_active:
        return {"success": False, "message": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"}
    
    if not item.is_shared_gift:
        return {"success": False, "message": "–¢–æ–≤–∞—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user.balance < item.price_spasibki:
        return {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ø–∞—Å–∏–±–æ–∫"}
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    invitation_code = str(uuid.uuid4())[:8]
    db_invitation = models.SharedGiftInvitation(
        item_id=invitation.item_id,
        creator_id=user_id,
        invitation_code=invitation_code,
        max_participants=invitation.max_participants,
        expires_at=datetime.now() + timedelta(hours=24)  # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞
    )
    
    db.add(db_invitation)
    await db.commit()
    await db.refresh(db_invitation)
    
    return {
        "success": True,
        "invitation_id": db_invitation.id,
        "invitation_code": invitation_code,
        "expires_at": db_invitation.expires_at
    }


async def get_shared_gift_invitation(db: AsyncSession, invitation_code: str):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É"""
    result = await db.execute(
        select(models.SharedGiftInvitation)
        .where(models.SharedGiftInvitation.invitation_code == invitation_code)
    )
    return result.scalars().first()


async def accept_shared_gift_invitation(db: AsyncSession, invitation_id: int, user_id: int):
    """–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"""
    invitation = await db.get(models.SharedGiftInvitation, invitation_id)
    if not invitation:
        return {"success": False, "message": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
    
    if invitation.expires_at < datetime.now():
        return {"success": False, "message": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ"}
    
    if invitation.status != "pending":
        return {"success": False, "message": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"}
    
    user = await db.get(models.User, user_id)
    if not user:
        return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    if user_id == invitation.creator_id:
        return {"success": False, "message": "–ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"}
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
    item = await db.get(models.MarketItem, invitation.item_id)
    if not item:
        return {"success": False, "message": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user.balance < item.price_spasibki:
        return {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ø–∞—Å–∏–±–æ–∫"}
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invitation.status = "accepted"
    invitation.accepted_by_id = user_id
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É
    db_purchase = models.Purchase(
        user_id=user_id,
        item_id=item.id,
        amount=item.price_spasibki,
        is_shared_gift=True,
        shared_gift_invitation_id=invitation_id
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    user.balance -= item.price_spasibki
    
    db.add(db_purchase)
    db.add(user)
    await db.commit()
    await db.refresh(db_purchase)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    try:
        creator = await db.get(models.User, invitation.creator_id)
        if creator:
            notification_text = (
                f"üéâ *–í–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!*\n\n"
                f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name} {user.last_name}\n"
                f"üéÅ *–¢–æ–≤–∞—Ä:* {item.name}\n"
                f"üí∞ *–°—É–º–º–∞:* {item.price_spasibki} —Å–ø–∞—Å–∏–±–æ–∫"
            )
            
            await send_telegram_message(
                chat_id=creator.telegram_id,
                text=notification_text
            )
    except Exception as e:
        print(f"Failed to send notification: {e}")
    
    return {
        "success": True,
        "purchase_id": db_purchase.id,
        "message": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ"
    }


async def reject_shared_gift_invitation(db: AsyncSession, invitation_id: int, user_id: int):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"""
    invitation = await db.get(models.SharedGiftInvitation, invitation_id)
    if not invitation:
        return {"success": False, "message": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
    
    if invitation.status != "pending":
        return {"success": False, "message": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"}
    
    invitation.status = "rejected"
    invitation.rejected_by_id = user_id
    
    await db.commit()
    
    return {"success": True, "message": "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"}


async def refund_shared_gift_purchase(db: AsyncSession, purchase_id: int):
    """–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"""
    purchase = await db.get(models.Purchase, purchase_id)
    if not purchase or not purchase.is_shared_gift:
        return {"success": False, "message": "–ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
    
    user = await db.get(models.User, purchase.user_id)
    if not user:
        return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    user.balance += purchase.amount
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–∫—É–ø–∫—É
    await db.delete(purchase)
    await db.commit()
    
    return {"success": True, "message": "–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã"}


async def get_user_shared_gift_invitations(db: AsyncSession, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await db.execute(
        select(models.SharedGiftInvitation)
        .where(
            or_(
                models.SharedGiftInvitation.creator_id == user_id,
                models.SharedGiftInvitation.accepted_by_id == user_id
            )
        )
        .order_by(desc(models.SharedGiftInvitation.created_at))
    )
    return result.scalars().all()


async def cleanup_expired_shared_gift_invitations(db: AsyncSession):
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    now = datetime.now()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    result = await db.execute(
        select(models.SharedGiftInvitation)
        .where(
            and_(
                models.SharedGiftInvitation.expires_at < now,
                models.SharedGiftInvitation.status == "pending"
            )
        )
    )
    expired_invitations = result.scalars().all()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    for invitation in expired_invitations:
        invitation.status = "expired"
    
    await db.commit()
    
    return {"expired_count": len(expired_invitations)}
