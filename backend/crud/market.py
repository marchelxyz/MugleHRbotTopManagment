# backend/crud/market.py

from typing import List, Optional
from datetime import datetime, date
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, desc, and_
from sqlalchemy.orm import selectinload
import models
import schemas
from config import settings
from bot import send_telegram_message
import random
import string


async def get_market_items(db: AsyncSession):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –º–∞—Ä–∫–µ—Ç–∞"""
    result = await db.execute(
        select(models.MarketItem)
        .options(selectinload(models.MarketItem.item_codes))
        .order_by(desc(models.MarketItem.created_at))
    )
    return result.scalars().all()


async def get_active_items(db: AsyncSession):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –º–∞—Ä–∫–µ—Ç–∞"""
    result = await db.execute(
        select(models.MarketItem)
        .where(models.MarketItem.is_active == True)
        .options(selectinload(models.MarketItem.item_codes))
        .order_by(desc(models.MarketItem.created_at))
    )
    return result.scalars().all()


async def create_market_item(db: AsyncSession, item: schemas.MarketItemCreate):
    """–°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –º–∞—Ä–∫–µ—Ç–∞"""
    db_item = models.MarketItem(**item.model_dump())
    db.add(db_item)
    await db.commit()
    await db.refresh(db_item)
    return db_item


async def admin_create_market_item(db: AsyncSession, item: schemas.MarketItemCreate, admin_user: models.User):
    """–°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –º–∞—Ä–∫–µ—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    db_item = models.MarketItem(**item.model_dump())
    db.add(db_item)
    await db.commit()
    await db.refresh(db_item)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
    log_message = (
        f"üõçÔ∏è *–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä*\n\n"
        f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
        f"üì¶ *–¢–æ–≤–∞—Ä:* {db_item.name}\n"
        f"üí∞ *–¶–µ–Ω–∞:* {db_item.price_rubles} —Ä—É–±. / {db_item.price_spasibki} —Å–ø–∞—Å–∏–±–æ–∫"
    )
    
    await send_telegram_message(
        chat_id=settings.TELEGRAM_CHAT_ID,
        text=log_message,
        message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
    )
    
    return db_item


async def admin_update_market_item(db: AsyncSession, item_id: int, item_data: schemas.MarketItemUpdate, admin_user: models.User):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –º–∞—Ä–∫–µ—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    item = await db.get(models.MarketItem, item_id)
    if not item:
        return None
    
    update_data = item_data.model_dump(exclude_unset=True)
    changes_log = []
    
    for key, new_value in update_data.items():
        old_value = getattr(item, key, None)
        if old_value != new_value:
            changes_log.append(f"  - {key}: `{old_value}` -> `{new_value}`")
        setattr(item, key, new_value)
    
    if changes_log:
        await db.commit()
        await db.refresh(item)
        
        admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
        log_message = (
            f"‚úèÔ∏è *–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω*\n\n"
            f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
            f"üì¶ *–¢–æ–≤–∞—Ä:* {item.name}\n\n"
            f"*–ò–∑–º–µ–Ω–µ–Ω–∏—è:*\n" + "\n".join(changes_log)
        )
        
        await send_telegram_message(
            chat_id=settings.TELEGRAM_CHAT_ID,
            text=log_message,
            message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
        )
    
    return item


async def archive_market_item(db: AsyncSession, item_id: int):
    """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –º–∞—Ä–∫–µ—Ç–∞"""
    item = await db.get(models.MarketItem, item_id)
    if item:
        item.is_active = False
        await db.commit()
        await db.refresh(item)
    return item


async def get_archived_items(db: AsyncSession):
    """–ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
    result = await db.execute(
        select(models.MarketItem)
        .where(models.MarketItem.is_active == False)
        .order_by(desc(models.MarketItem.created_at))
    )
    return result.scalars().all()


async def admin_delete_item_permanently(db: AsyncSession, item_id: int, admin_user: models.User):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞–≤—Å–µ–≥–¥–∞"""
    item = await db.get(models.MarketItem, item_id)
    if not item:
        return None
    
    item_name = item.name
    await db.delete(item)
    await db.commit()
    
    admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
    log_message = (
        f"üóëÔ∏è *–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞*\n\n"
        f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
        f"üì¶ *–¢–æ–≤–∞—Ä:* {item_name}"
    )
    
    await send_telegram_message(
        chat_id=settings.TELEGRAM_CHAT_ID,
        text=log_message,
        message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
    )
    
    return True


async def admin_restore_market_item(db: AsyncSession, item_id: int, admin_user: models.User):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∞—Ä—Ö–∏–≤–∞"""
    item = await db.get(models.MarketItem, item_id)
    if not item:
        return None
    
    item.is_active = True
    await db.commit()
    await db.refresh(item)
    
    admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
    log_message = (
        f"‚ôªÔ∏è *–¢–æ–≤–∞—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n"
        f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
        f"üì¶ *–¢–æ–≤–∞—Ä:* {item.name}"
    )
    
    await send_telegram_message(
        chat_id=settings.TELEGRAM_CHAT_ID,
        text=log_message,
        message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
    )
    
    return item


async def create_purchase(db: AsyncSession, purchase: schemas.PurchaseCreate, user_id: int):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–∫—É–ø–∫—É"""
    user = await db.get(models.User, user_id)
    if not user:
        return None
    
    item = await db.get(models.MarketItem, purchase.item_id)
    if not item or not item.is_active:
        raise ValueError("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if user.balance < item.price_spasibki:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ø–∞—Å–∏–±–æ–∫")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    db_purchase = models.Purchase(
        user_id=user_id,
        item_id=purchase.item_id,
        amount=item.price_spasibki
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    user.balance -= item.price_spasibki
    
    db.add(db_purchase)
    db.add(user)
    await db.commit()
    await db.refresh(db_purchase)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏
    if item.auto_issue:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–æ–¥–∞
        item_code = models.ItemCode(
            item_id=item.id,
            purchase_id=db_purchase.id,
            code=code,
            is_used=False
        )
        db.add(item_code)
        await db.commit()
        await db.refresh(item_code)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            notification_text = (
                f"üéâ *–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!*\n\n"
                f"üì¶ *–¢–æ–≤–∞—Ä:* {item.name}\n"
                f"üîë *–ö–æ–¥:* `{code}`\n"
                f"üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {item.price_spasibki} —Å–ø–∞—Å–∏–±–æ–∫"
            )
            
            await send_telegram_message(
                chat_id=user.telegram_id,
                text=notification_text
            )
        except Exception as e:
            print(f"Failed to send notification: {e}")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    try:
        admin_notification = (
            f"üõí *–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞*\n\n"
            f"üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {user.first_name} {user.last_name}\n"
            f"üì¶ *–¢–æ–≤–∞—Ä:* {item.name}\n"
            f"üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {item.price_spasibki} —Å–ø–∞—Å–∏–±–æ–∫"
        )
        
        await send_telegram_message(
            chat_id=settings.TELEGRAM_CHAT_ID,
            text=admin_notification,
            message_thread_id=settings.TELEGRAM_PURCHASE_TOPIC_ID
        )
    except Exception as e:
        print(f"Failed to send admin notification: {e}")
    
    return db_purchase


def calculate_spasibki_price(price_rubles: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –≤ —Å–ø–∞—Å–∏–±–∫–∞—Ö"""
    return max(1, price_rubles // 10)


def calculate_accumulation_forecast(price_rubles: int, current_balance: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"""
    spasibki_price = calculate_spasibki_price(price_rubles)
    if current_balance >= spasibki_price:
        return 0
    
    needed = spasibki_price - current_balance
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 10 —Å–ø–∞—Å–∏–±–æ–∫ –≤ –¥–µ–Ω—å
    daily_income = 10
    return (needed + daily_income - 1) // daily_income
