# backend/crud/admin.py

from typing import List, Optional
from datetime import datetime, date, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, desc, and_, update
from sqlalchemy.orm import selectinload
import models
import schemas
from config import settings
from bot import send_telegram_message


async def add_points_to_all_users(db: AsyncSession, points: int, admin_user: models.User):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–ø–∞—Å–∏–±–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    result = await db.execute(select(models.User))
    users = result.scalars().all()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    for user in users:
        user.balance += points
    
    await db.commit()
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
    log_message = (
        f"üí∞ *–ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å–ø–∞—Å–∏–±–æ–∫*\n\n"
        f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
        f"üíµ *–°—É–º–º–∞:* {points} —Å–ø–∞—Å–∏–±–æ–∫ –∫–∞–∂–¥–æ–º—É\n"
        f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(users)}"
    )
    
    await send_telegram_message(
        chat_id=settings.TELEGRAM_CHAT_ID,
        text=log_message,
        message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
    )
    
    return {"users_updated": len(users), "points_added": points}


async def add_tickets_to_all_users(db: AsyncSession, tickets: int, admin_user: models.User):
    """–î–æ–±–∞–≤–∏—Ç—å –±–∏–ª–µ—Ç—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    result = await db.execute(select(models.User))
    users = result.scalars().all()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–ª–µ—Ç—ã
    for user in users:
        user.tickets += tickets
    
    await db.commit()
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
    log_message = (
        f"üé´ *–ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤*\n\n"
        f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
        f"üé´ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {tickets} –±–∏–ª–µ—Ç–æ–≤ –∫–∞–∂–¥–æ–º—É\n"
        f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(users)}"
    )
    
    await send_telegram_message(
        chat_id=settings.TELEGRAM_CHAT_ID,
        text=log_message,
        message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
    )
    
    return {"users_updated": len(users), "tickets_added": tickets}


async def reset_balances(db: AsyncSession, admin_user: models.User):
    """–°–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    result = await db.execute(select(models.User))
    users = result.scalars().all()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
    for user in users:
        user.balance = 0
    
    await db.commit()
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
    log_message = (
        f"üîÑ *–°–±—Ä–æ—Å –±–∞–ª–∞–Ω—Å–æ–≤*\n\n"
        f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
        f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(users)}"
    )
    
    await send_telegram_message(
        chat_id=settings.TELEGRAM_CHAT_ID,
        text=log_message,
        message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
    )
    
    return {"users_updated": len(users)}


async def get_active_banners(db: AsyncSession):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã"""
    result = await db.execute(
        select(models.Banner)
        .where(models.Banner.is_active == True)
        .order_by(desc(models.Banner.created_at))
    )
    return result.scalars().all()


async def get_all_banners(db: AsyncSession):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∞–Ω–Ω–µ—Ä—ã"""
    result = await db.execute(
        select(models.Banner)
        .order_by(desc(models.Banner.created_at))
    )
    return result.scalars().all()


async def create_banner(db: AsyncSession, banner: schemas.BannerCreate, admin_user: models.User):
    """–°–æ–∑–¥–∞—Ç—å –±–∞–Ω–Ω–µ—Ä"""
    db_banner = models.Banner(**banner.model_dump())
    db.add(db_banner)
    await db.commit()
    await db.refresh(db_banner)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
    log_message = (
        f"üì¢ *–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä*\n\n"
        f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
        f"üìù *–¢–µ–∫—Å—Ç:* {db_banner.text[:50]}..."
    )
    
    await send_telegram_message(
        chat_id=settings.TELEGRAM_CHAT_ID,
        text=log_message,
        message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
    )
    
    return db_banner


async def update_banner(db: AsyncSession, banner_id: int, banner_data: schemas.BannerUpdate, admin_user: models.User):
    """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä"""
    banner = await db.get(models.Banner, banner_id)
    if not banner:
        return None
    
    update_data = banner_data.model_dump(exclude_unset=True)
    changes_log = []
    
    for key, new_value in update_data.items():
        old_value = getattr(banner, key, None)
        if old_value != new_value:
            changes_log.append(f"  - {key}: `{old_value}` -> `{new_value}`")
        setattr(banner, key, new_value)
    
    if changes_log:
        await db.commit()
        await db.refresh(banner)
        
        admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
        log_message = (
            f"‚úèÔ∏è *–ë–∞–Ω–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω*\n\n"
            f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
            f"üìù *–ë–∞–Ω–Ω–µ—Ä:* {banner.text[:50]}...\n\n"
            f"*–ò–∑–º–µ–Ω–µ–Ω–∏—è:*\n" + "\n".join(changes_log)
        )
        
        await send_telegram_message(
            chat_id=settings.TELEGRAM_CHAT_ID,
            text=log_message,
            message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
        )
    
    return banner


async def delete_banner(db: AsyncSession, banner_id: int, admin_user: models.User):
    """–£–¥–∞–ª–∏—Ç—å –±–∞–Ω–Ω–µ—Ä"""
    banner = await db.get(models.Banner, banner_id)
    if not banner:
        return None
    
    banner_text = banner.text
    await db.delete(banner)
    await db.commit()
    
    admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
    log_message = (
        f"üóëÔ∏è *–ë–∞–Ω–Ω–µ—Ä —É–¥–∞–ª–µ–Ω*\n\n"
        f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
        f"üìù *–ë–∞–Ω–Ω–µ—Ä:* {banner_text[:50]}..."
    )
    
    await send_telegram_message(
        chat_id=settings.TELEGRAM_CHAT_ID,
        text=log_message,
        message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
    )
    
    return True


async def process_birthday_bonuses(db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–Ω—É—Å—ã –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"""
    today = date.today()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
    result = await db.execute(
        select(models.User).where(
            and_(
                models.User.date_of_birth.isnot(None),
                func.extract('month', models.User.date_of_birth) == today.month,
                func.extract('day', models.User.date_of_birth) == today.day
            )
        )
    )
    birthday_users = result.scalars().all()
    
    bonus_amount = 50  # –ë–æ–Ω—É—Å –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
    updated_users = []
    
    for user in birthday_users:
        user.balance += bonus_amount
        updated_users.append(user)
    
    if updated_users:
        await db.commit()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        log_message = (
            f"üéÇ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è*\n\n"
            f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(updated_users)}\n"
            f"üí∞ *–ë–æ–Ω—É—Å:* {bonus_amount} —Å–ø–∞—Å–∏–±–æ–∫ –∫–∞–∂–¥–æ–º—É"
        )
        
        await send_telegram_message(
            chat_id=settings.TELEGRAM_CHAT_ID,
            text=log_message,
            message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
        )
    
    return {"users_updated": len(updated_users), "bonus_amount": bonus_amount}


async def update_user_status(db: AsyncSession, user_id: int, status: str, admin_user: models.User):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get(models.User, user_id)
    if not user:
        return None
    
    old_status = user.status
    user.status = status
    
    await db.commit()
    await db.refresh(user)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
    user_name = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name}"
    
    log_message = (
        f"üë§ *–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
        f"üéØ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_name}\n"
        f"üìä *–°—Ç–∞—Ç—É—Å:* {old_status} ‚Üí {status}"
    )
    
    await send_telegram_message(
        chat_id=settings.TELEGRAM_CHAT_ID,
        text=log_message,
        message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
    )
    
    return user


async def process_profile_update(db: AsyncSession, update_id: int, action: str, admin_user: models.User):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    pending_update = await db.get(models.PendingUpdate, update_id)
    if not pending_update:
        return None
    
    user = await db.get(models.User, pending_update.user_id)
    if not user:
        return None
    
    if action == "approve":
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        update_data = pending_update.update_data
        for key, value in update_data.items():
            if hasattr(user, key):
                setattr(user, key, value)
        
        user.status = "approved"
        await db.delete(pending_update)
        await db.commit()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            notification_text = (
                f"‚úÖ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–¥–æ–±—Ä–µ–Ω–æ*\n\n"
                f"–í–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã."
            )
            
            await send_telegram_message(
                chat_id=user.telegram_id,
                text=notification_text
            )
        except Exception as e:
            print(f"Failed to send notification: {e}")
    
    elif action == "reject":
        user.status = "rejected"
        await db.delete(pending_update)
        await db.commit()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            notification_text = (
                f"‚ùå *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ*\n\n"
                f"–í–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã."
            )
            
            await send_telegram_message(
                chat_id=user.telegram_id,
                text=notification_text
            )
        except Exception as e:
            print(f"Failed to send notification: {e}")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
    user_name = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name}"
    
    log_message = (
        f"üìù *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
        f"üéØ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_name}\n"
        f"‚ö° *–î–µ–π—Å—Ç–≤–∏–µ:* {action}"
    )
    
    await send_telegram_message(
        chat_id=settings.TELEGRAM_CHAT_ID,
        text=log_message,
        message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
    )
    
    return user


async def request_profile_update(db: AsyncSession, user_id: int, update_data: dict):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    pending_update = models.PendingUpdate(
        user_id=user_id,
        update_data=update_data
    )
    
    db.add(pending_update)
    await db.commit()
    await db.refresh(pending_update)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    user = await db.get(models.User, user_id)
    if user:
        user_name = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name}"
        
        log_message = (
            f"üìù *–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_name}\n"
            f"üìä *ID –∑–∞–ø—Ä–æ—Å–∞:* {pending_update.id}"
        )
        
        await send_telegram_message(
            chat_id=settings.TELEGRAM_CHAT_ID,
            text=log_message,
            message_thread_id=settings.TELEGRAM_ADMIN_TOPIC_ID
        )
    
    return pending_update
