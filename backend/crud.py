# backend/crud.py
import io
import zipfile
import json
import math 
from typing import Optional
from datetime import datetime
from sqlalchemy.orm import Session, selectinload
import random
import bot
import config
from sqlalchemy.future import select
from sqlalchemy.orm import aliased
from sqlalchemy import select, func, update, delete, extract
from sqlalchemy.ext.asyncio import AsyncSession
import models, schemas
from config import settings
from bot import send_telegram_message
from database import settings
from datetime import datetime, timedelta, date
from sqlalchemy import or_
from sqlalchemy import text
from sqlalchemy import select

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
async def get_user(db: AsyncSession, user_id: int):
    result = await db.execute(select(models.User).where(models.User.id == user_id))
    return result.scalars().first()

async def get_user_by_telegram(db: AsyncSession, telegram_id: int):
    result = await db.execute(select(models.User).where(models.User.telegram_id == telegram_id))
    return result.scalars().first()

async def create_user(db: AsyncSession, user: schemas.RegisterRequest):
    user_telegram_id = int(user.telegram_id)
    
    admin_ids_str = settings.TELEGRAM_ADMIN_IDS
    admin_ids = [int(id.strip()) for id in admin_ids_str.split(',')]
    is_admin = user_telegram_id in admin_ids
    
    dob = None
    if user.date_of_birth and user.date_of_birth.strip():
        try: dob = date.fromisoformat(user.date_of_birth)
        except (ValueError, TypeError): dob = None

    db_user = models.User(
        telegram_id=user_telegram_id,
        first_name=user.first_name,
        last_name=user.last_name,
        position=user.position,
        department=user.department,
        username=user.username,
        is_admin=is_admin,
        telegram_photo_url=user.telegram_photo_url,
        phone_number=user.phone_number,
        date_of_birth=dob,
        last_login_date=date.today()
    )
    db.add(db_user)
    await db.commit()
    await db.refresh(db_user)
    
    try:
        user_info = (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n"
            f"üë§ **–ò–º—è:** {db_user.first_name} {db_user.last_name}\n"
            f"üè¢ **–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:** {db_user.department}\n"
            f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {db_user.position}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {db_user.phone_number or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üéÇ **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** {db_user.date_of_birth or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üÜî **Telegram ID:** {db_user.telegram_id}"
        )

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ö–ù–û–ü–û–ö ---
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"approve_{db_user.id}"},
                    {"text": "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", "callback_data": f"reject_{db_user.id}"}
                ]
            ]
        }
        
        await send_telegram_message(
            chat_id=settings.TELEGRAM_CHAT_ID,
            text=user_info,
            reply_markup=keyboard,
            message_thread_id=settings.TELEGRAM_ADMIN_TOPIC_ID
        )
    except Exception as e:
        print(f"FAILED to send admin notification. Error: {e}")
    
    return db_user

async def get_users(db: AsyncSession):
    result = await db.execute(select(models.User))
    return result.scalars().all()

async def update_user_profile(db: AsyncSession, user_id: int, data: schemas.UserUpdate):
    user = await get_user(db, user_id)
    if not user:
        return None
    
    update_data = data.model_dump(exclude_unset=True)
    
    for key, value in update_data.items():
        if key == 'date_of_birth' and value:
            try:
                value = date.fromisoformat(value)
            except (ValueError, TypeError):
                value = None
        setattr(user, key, value)
        
    await db.commit()
    await db.refresh(user)
    return user

# –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def create_transaction(db: AsyncSession, tr: schemas.TransferRequest):
    today = date.today()
    sender = await db.get(models.User, tr.sender_id)
    if not sender:
        raise ValueError("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—É —Å –¥–∞—Ç–æ–π, –¥–æ–±–∞–≤–ª—è—è .date()
    if sender.last_login_date is None or sender.last_login_date.date() < today:
        sender.daily_transfer_count = 0
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ last_login_date, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–æ–Ω–∫–∞ —Ç–µ–ø–µ—Ä—å DateTime
    sender.last_login_date = datetime.utcnow()
    
    fixed_amount = 1 
    if sender.daily_transfer_count >= 3:
        raise ValueError("–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω (3 –≤ –¥–µ–Ω—å)")

    receiver = await db.get(models.User, tr.receiver_id)
    if not receiver:
        raise ValueError("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    sender.daily_transfer_count += 1
    receiver.balance += fixed_amount
    sender.ticket_parts += 1
    
    db_tr = models.Transaction(
        sender_id=tr.sender_id,
        receiver_id=tr.receiver_id,
        amount=fixed_amount,
        message=tr.message
    )
    db.add(db_tr)
    await db.commit()
    await db.refresh(sender) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ –ë–î
    
    try:
        message_text = (f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ *1* —Å–ø–∞—Å–∏–±–∫–∞!\n"
                        f"–û—Ç: *{sender.first_name} {sender.last_name}*\n"
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ: _{tr.message}_")
        await send_telegram_message(chat_id=receiver.telegram_id, text=message_text)
    except Exception as e:
        print(f"Could not send notification to user {receiver.telegram_id}. Error: {e}")
    
    # --- –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ---
    return sender
    
# crud.py

async def get_feed(db: AsyncSession):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª–µ–Ω—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
    """
    Sender = aliased(models.User, name='sender_user')
    Receiver = aliased(models.User, name='receiver_user')

    stmt = (
        select(models.Transaction)
        .join(Sender, models.Transaction.sender_id == Sender.id)
        .join(Receiver, models.Transaction.receiver_id == Receiver.id)
        .order_by(models.Transaction.timestamp.desc())
    )
    result = await db.execute(stmt)
    return result.scalars().all()

async def get_user_transactions(db: AsyncSession, user_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è, —á—Ç–æ –≤—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    Sender = aliased(models.User, name='sender_user')
    Receiver = aliased(models.User, name='receiver_user')

    stmt = (
        select(models.Transaction)
        .join(Sender, models.Transaction.sender_id == Sender.id)
        .join(Receiver, models.Transaction.receiver_id == Receiver.id)
        .where((models.Transaction.sender_id == user_id) | (models.Transaction.receiver_id == user_id))
        .order_by(models.Transaction.timestamp.desc())
    )
    result = await db.execute(stmt)
    return result.scalars().all()

# –õ–∏–¥–µ—Ä–±–æ—Ä–¥
async def get_leaderboard_data(db: AsyncSession, period: str, leaderboard_type: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞.
    :param period: 'current_month', 'last_month', 'all_time'
    :param leaderboard_type: 'received' (–ø–æ–ª—É—á–∞—Ç–µ–ª–∏) –∏–ª–∏ 'sent' (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏)
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ –∫–∞–∫–æ–º—É –ø–æ–ª—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å
    group_by_field = "receiver_id" if leaderboard_type == 'received' else "sender_id"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
    start_date, end_date = None, None
    today = datetime.utcnow()
    
    if period == 'current_month':
        start_date = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        end_date = today
    elif period == 'last_month':
        first_day_current_month = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        end_date = first_day_current_month - timedelta(days=1)
        start_date = end_date.replace(day=1)
        end_date = end_date.replace(hour=23, minute=59, second=59) # –í–∫–ª—é—á–∞–µ–º –≤–µ—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    query = (
        select(
            models.User,
            func.sum(models.Transaction.amount).label("total_amount"),
        )
        .join(models.Transaction, models.User.id == getattr(models.Transaction, group_by_field))
        .group_by(models.User.id)
        .order_by(func.sum(models.Transaction.amount).desc())
        .limit(100) # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã–≤–æ–¥ –¥–æ 100 –ª–∏–¥–µ—Ä–æ–≤
    )
    
    if start_date and end_date:
        query = query.where(models.Transaction.timestamp.between(start_date, end_date))

    result = await db.execute(query)
    leaderboard_data = result.all()

    # Pydantic –æ–∂–∏–¥–∞–µ—Ç total_received, –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return [{"user": user, "total_received": total_amount or 0} for user, total_amount in leaderboard_data]


async def get_user_rank(db: AsyncSession, user_id: int, period: str, leaderboard_type: str):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–Ω–≥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∏ –æ–±—â–µ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    group_by_field = "receiver_id" if leaderboard_type == 'received' else "sender_id"
    
    start_date, end_date = None, None
    today = datetime.utcnow()
    
    if period == 'current_month':
        start_date = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        end_date = today
    elif period == 'last_month':
        first_day_current_month = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        end_date = first_day_current_month - timedelta(days=1)
        start_date = end_date.replace(day=1)
        end_date = end_date.replace(hour=23, minute=59, second=59)

    time_filter = ""
    if start_date and end_date:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–∞
        start_str = start_date.strftime('%Y-%m-%d %H:%M:%S')
        end_str = end_date.strftime('%Y-%m-%d %H:%M:%S')
        time_filter = f"WHERE transactions.timestamp BETWEEN '{start_str}' AND '{end_str}'"

    # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---
    raw_sql = text(f"""
        WITH ranked_users AS (
            SELECT
                u.id as user_id,
                SUM(t.amount) as total_amount,
                RANK() OVER (ORDER BY SUM(t.amount) DESC) as rank
            FROM users u
            JOIN transactions t ON u.id = t.{group_by_field}
            {time_filter.replace('transactions.', 't.')}
            GROUP BY u.id
        ),
        total_participants AS (
            SELECT COUNT(DISTINCT {group_by_field}) as count FROM transactions {time_filter}
        )
        SELECT ru.rank, ru.total_amount, tp.count
        FROM ranked_users ru, total_participants tp
        WHERE ru.user_id = :user_id
    """)
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---

    result = await db.execute(raw_sql, {"user_id": user_id})
    user_rank_data = result.first()

    if not user_rank_data:
        total_participants_sql = text(f"SELECT COUNT(DISTINCT {group_by_field}) as count FROM transactions {time_filter}")
        total_result = await db.execute(total_participants_sql)
        total_participants = total_result.scalar_one_or_none() or 0
        return {"rank": None, "total_received": 0, "total_participants": total_participants}

    return {
        "rank": user_rank_data.rank,
        "total_received": user_rank_data.total_amount,
        "total_participants": user_rank_data.count
    }

# –ú–∞—Ä–∫–µ—Ç
async def get_market_items(db: AsyncSession):
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç—ã SQLAlchemy,
    # Pydantic —Å–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö —Å–æ–≥–ª–∞—Å–Ω–æ response_model –≤ —Ä–æ—É—Ç–µ—Ä–µ.
    result = await db.execute(select(models.MarketItem))
    return result.scalars().all()

async def get_active_items(db: AsyncSession):
    result = await db.execute(
        select(models.MarketItem)
        .where(models.MarketItem.is_archived == False)
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'codes' ---
        .options(selectinload(models.MarketItem.codes)) 
    )
    items = result.scalars().all()
    
    for item in items:
        if item.is_auto_issuance:
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'codes' –∏ –∑–¥–µ—Å—å ---
            available_codes = sum(1 for code in item.codes if not code.is_issued)
            item.stock = available_codes
            
    return items

async def create_market_item(db: AsyncSession, item: schemas.MarketItemCreate):
    db_item = models.MarketItem(**item.model_dump())
    db.add(db_item)
    await db.commit()
    await db.refresh(db_item)
    
    return {
        "id": db_item.id, "name": db_item.name, "description": db_item.description,
        "price": db_item.price, "stock": db_item.stock,
    }
    
# backend/crud.py

# backend/crud.py

async def create_purchase(db: AsyncSession, pr: schemas.PurchaseRequest):
    issued_code_value = None
    item = await db.get(models.MarketItem, pr.item_id)
    result = await db.execute(
        select(models.User).where(models.User.telegram_id == pr.user_id)
    )
    user = result.scalar_one_or_none()

    if not item or not user:
        raise ValueError("–¢–æ–≤–∞—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    if user.balance < item.price:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

    if item.is_auto_issuance:
        stmt = (
            select(models.ItemCode)
            .where(models.ItemCode.market_item_id == item.id, models.ItemCode.is_issued == False)
            .limit(1)
            .with_for_update()
        )
        result = await db.execute(stmt)
        code_to_issue = result.scalars().first()
        if not code_to_issue:
            raise ValueError("–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤)")
        user.balance -= item.price
        code_to_issue.is_issued = True
        code_to_issue.issued_to_user_id = user.id
        issued_code_value = code_to_issue.code_value
    else:
        if item.stock <= 0:
            raise ValueError("–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
        user.balance -= item.price
        item.stock -= 1

    db_purchase = models.Purchase(user_id=user.id, item_id=pr.item_id)
    db.add(db_purchase)
    if 'code_to_issue' in locals() and code_to_issue:
        await db.flush()
        code_to_issue.purchase_id = db_purchase.id

    # --- –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ---
    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        admin_message = (
            f"üõçÔ∏è *–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name} (@{user.username or user.telegram_id})\n"
            f"üíº *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {user.position}\n\n"
            f"üéÅ *–¢–æ–≤–∞—Ä:* {item.name}\n"
            f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {item.price} —Å–ø–∞—Å–∏–±–æ–∫"
        )
        if issued_code_value:
            admin_message += (
                f"\n\n‚ú® *–¢–æ–≤–∞—Ä —Å –∞–≤—Ç–æ–≤—ã–¥–∞—á–µ–π*\n"
                f"üîë *–í—ã–¥–∞–Ω–Ω—ã–π –∫–æ–¥:* `{issued_code_value}`"
            )
        admin_message += f"\n\nüìâ *–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {user.balance} —Å–ø–∞—Å–∏–±–æ–∫"
        
        await send_telegram_message(
            chat_id=settings.TELEGRAM_CHAT_ID,
            text=admin_message,
            message_thread_id=settings.TELEGRAM_PURCHASE_TOPIC_ID
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–ø–µ—Ä—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫)
        user_message = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π \"{item.name}\"!"
        if issued_code_value:
            # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–æ–¥–æ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –∫–æ–¥
            user_message += f"\n\n–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥/—Å—Å—ã–ª–∫–∞:\n`{issued_code_value}`"
        
        await send_telegram_message(chat_id=user.telegram_id, text=user_message)

    except Exception as e:
        print(f"Could not send notification. Error: {e}")

    await db.commit()
    
    return {"new_balance": user.balance, "issued_code": issued_code_value}
    
# –ê–¥–º–∏–Ω
async def add_points_to_all_users(db: AsyncSession, amount: int):
    await db.execute(update(models.User).values(balance=models.User.balance + amount))
    await db.commit()
    return True

# --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é ---
async def add_tickets_to_all_users(db: AsyncSession, amount: int):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    await db.execute(update(models.User).values(tickets=models.User.tickets + amount))
    await db.commit()
    return True
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

async def reset_balances(db: AsyncSession):
    await db.execute(update(models.User).values(balance=0))
    await db.commit()
    return True

# --- CRUD –î–õ–Ø –ë–ê–ù–ù–ï–†–û–í ---

async def get_active_banners(db: AsyncSession):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã."""
    result = await db.execute(
        select(models.Banner).where(models.Banner.is_active == True)
    )
    return result.scalars().all()

async def get_all_banners(db: AsyncSession):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –±–∞–Ω–Ω–µ—Ä—ã (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)."""
    result = await db.execute(select(models.Banner))
    return result.scalars().all()

async def create_banner(db: AsyncSession, banner: schemas.BannerCreate):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä."""
    db_banner = models.Banner(**banner.model_dump())
    db.add(db_banner)
    await db.commit()
    await db.refresh(db_banner)
    return db_banner

async def update_banner(db: AsyncSession, banner_id: int, banner_data: schemas.BannerUpdate):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–Ω–Ω–µ—Ä."""
    result = await db.execute(select(models.Banner).where(models.Banner.id == banner_id))
    db_banner = result.scalars().first()
    if not db_banner:
        return None
    
    for key, value in banner_data.model_dump(exclude_unset=True).items():
        setattr(db_banner, key, value)
        
    await db.commit()
    await db.refresh(db_banner)
    return db_banner

async def delete_banner(db: AsyncSession, banner_id: int):
    """–£–¥–∞–ª—è–µ—Ç –±–∞–Ω–Ω–µ—Ä."""
    result = await db.execute(select(models.Banner).where(models.Banner.id == banner_id))
    db_banner = result.scalars().first()
    if db_banner:
        await db.delete(db_banner)
        await db.commit()
        return True
    return False

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò ---
async def process_birthday_bonuses(db: AsyncSession):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç 15 –±–∞–ª–ª–æ–≤ –≤—Å–µ–º, —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è."""
    today = date.today()
    users_with_birthday = await db.execute(
        select(models.User).where(
            func.extract('month', models.User.date_of_birth) == today.month,
            func.extract('day', models.User.date_of_birth) == today.day
        )
    )
    users = users_with_birthday.scalars().all()
    
    for user in users:
        user.balance += 15
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–ì
    
    # --- –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò –î–í–ï –°–¢–†–û–ö–ò ---
    await reset_ticket_parts(db)
    await reset_tickets(db)
    
    await db.commit()
    return len(users)

# --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –í –ö–û–ù–ï–¶ –§–ê–ô–õ–ê ---
async def update_user_status(db: AsyncSession, user_id: int, status: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    result = await db.execute(select(models.User).where(models.User.id == user_id))
    user = result.scalars().first()
    if user:
        user.status = status
        await db.commit()
        await db.refresh(user)
    return user

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è, –ø—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã ---
def calculate_spasibki_price(price_rub: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ '—Å–ø–∞—Å–∏–±–∫–∞—Ö' –ø–æ –∫—É—Ä—Å—É 50 —Ä—É–±–ª–µ–π –∑–∞ 1 —Å–ø–∞—Å–∏–±–∫—É."""
    if price_rub <= 0:
        return 0
    return round(price_rub / 30)

def calculate_accumulation_forecast(price_spasibki: int) -> str:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è."""
    # –≠—Ç–æ –æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö.
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ä–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –æ–∫–æ–ª–æ 1000 —Å–ø–∞—Å–∏–±–æ–∫ –≤ –º–µ—Å—è—Ü.
    months_needed = price_spasibki / 50
    
    if months_needed <= 1:
        return "–æ–∫–æ–ª–æ 1 –º–µ—Å—è—Ü–∞"
    elif months_needed <= 18: # –¥–æ 1.5 –ª–µ—Ç
        return f"–æ–∫–æ–ª–æ {round(months_needed)} –º–µ—Å."
    else:
        years = round(months_needed / 12, 1)
        return f"–æ–∫–æ–ª–æ {years} –ª–µ—Ç"

# –ú—ã –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é create_market_item
async def admin_create_market_item(db: AsyncSession, item: schemas.MarketItemCreate):
    calculated_price = item.price_rub // 30
    
    codes = []
    if item.is_auto_issuance and item.codes_text:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        codes = [code.strip() for code in item.codes_text.splitlines() if code.strip()]
        # –ï—Å–ª–∏ –∫–æ–¥—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–¥–æ–≤
        stock = len(codes)
    else:
        stock = item.stock

    db_item = models.MarketItem(
        name=item.name,
        description=item.description,
        price=calculated_price, 
        price_rub=item.price_rub,
        stock=stock, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–æ–∫
        image_url=item.image_url,
        original_price=item.original_price,
        is_auto_issuance=item.is_auto_issuance
    )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥—ã, —Å–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–∏—Ö –∑–∞–ø–∏—Å–∏ –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ
    if codes:
        for code_value in codes:
            db_code = models.ItemCode(code_value=code_value, market_item=db_item)
            db.add(db_code)

    db.add(db_item)
    await db.commit()
    await db.refresh(db_item)
    return db_item

async def admin_update_market_item(db: AsyncSession, item_id: int, item_data: schemas.MarketItemUpdate):
    db_item = await db.get(models.MarketItem, item_id)
    if not db_item:
        return None

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    update_data = item_data.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ –ø–æ–ª—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫
        if key not in ["added_stock", "new_item_codes"]:
            setattr(db_item, key, value)

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É –æ—Å—Ç–∞—Ç–∫—É
    if not db_item.is_auto_issuance and item_data.added_stock is not None and item_data.added_stock > 0:
        db_item.stock += item_data.added_stock

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
    if db_item.is_auto_issuance and item_data.new_item_codes:
        for code_value in item_data.new_item_codes:
            new_code = models.ItemCode(code_value=code_value.strip(), market_item_id=db_item.id)
            db.add(new_code)
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–æ–∫ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–µ–≤–µ—Ä–Ω—ã–π)
        current_codes_count = await db.scalar(select(func.count(models.ItemCode.id)).where(models.ItemCode.market_item_id == db_item.id))
        db_item.stock = current_codes_count


    await db.commit()
    await db.refresh(db_item)
    return db_item
    
async def archive_market_item(db: AsyncSession, item_id: int, restore: bool = False):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä."""
    db_item = await db.get(models.MarketItem, item_id)
    if db_item:
        db_item.is_archived = not restore
        db_item.archived_at = datetime.utcnow() if not restore else None
        await db.commit()
        return True
    return False

async def get_archived_items(db: AsyncSession):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
    result = await db.execute(select(models.MarketItem).where(models.MarketItem.is_archived == True))
    return result.scalars().all()

# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ---
async def admin_delete_item_permanently(db: AsyncSession, item_id: int):
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ---

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ç–æ–≤–∞—Ä–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
    purchases_count = await db.scalar(
        select(func.count(models.Purchase.id)).where(models.Purchase.item_id == item_id)
    )

    # 2. –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–æ–∫—É–ø–∫–∞, –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if purchases_count > 0:
        raise ValueError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–≤—è–∑–∞–Ω —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–∫—É–ø–æ–∫.")

    # 3. –ï—Å–ª–∏ –ø–æ–∫—É–ø–æ–∫ –Ω–µ—Ç, –Ω–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
    db_item = await db.get(models.MarketItem, item_id)
    if not db_item:
        return False  # –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω

    await db.delete(db_item)
    await db.commit()
    return True # –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    
# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–£–õ–ï–¢–ö–ò ---

async def assemble_tickets(db: AsyncSession, user_id: int):
    """–°–æ–±–∏—Ä–∞–µ—Ç —á–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–∏–∫–æ–≤ –≤ —Ü–µ–ª—ã–µ –±–∏–ª–µ—Ç—ã (2 –∫ 1)."""
    user = await db.get(models.User, user_id)
    if not user or user.ticket_parts < 3:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏ –±–∏–ª–µ—Ç–∞.")
    
    new_tickets = user.ticket_parts // 3
    user.tickets += new_tickets
    user.ticket_parts %= 3 # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ (0 –∏–ª–∏ 1)
    
    await db.commit()
    await db.refresh(user)
    return user

async def spin_roulette(db: AsyncSession, user_id: int):
    """
    –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Ä—É–ª–µ—Ç–∫—É, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –≤—ã–∏–≥—Ä—ã—à
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —à–∞–Ω—Å–∞ –¥–ª—è —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 15.
    """
    user = await db.get(models.User, user_id)
    if not user or user.tickets < 1:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏.")

    user.tickets -= 1

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –í–ó–í–ï–®–ï–ù–ù–û–ì–û –®–ê–ù–°–ê ---

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑—ã –∏ –∏—Ö —à–∞–Ω—Å—ã
    # –§–æ—Ä–º–∞—Ç: (–ø—Ä–∏–∑, —à–∞–Ω—Å_–≤_–ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    prize_tiers = {
        'small': (list(range(1, 5)), 65),    # –ü—Ä–∏–∑—ã –æ—Ç 1 –¥–æ 5, —à–∞–Ω—Å 65%
        'medium': (list(range(6, 10)), 30),   # –ü—Ä–∏–∑—ã –æ—Ç 6 –¥–æ 10, —à–∞–Ω—Å 30%
        'large': (list(range(11, 15)), 5)     # –ü—Ä–∏–∑—ã –æ—Ç 11 –¥–æ 15, —à–∞–Ω—Å 5%
    }
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–Ω—Å–æ–≤
    tiers = [tier for tier in prize_tiers.keys()]
    weights = [prize_tiers[tier][1] for tier in tiers]
    chosen_tier = random.choices(tiers, weights=weights, k=1)[0]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑ –∏–∑ –≤—ã–ø–∞–≤—à–µ–≥–æ —Ç–∏—Ä–∞
    possible_prizes = prize_tiers[chosen_tier][0]
    prize = random.choice(possible_prizes)

    user.balance += prize

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –≤ –∏—Å—Ç–æ—Ä–∏—é
    win_record = models.RouletteWin(user_id=user_id, amount=prize)
    db.add(win_record)
    
    await db.commit()
    await db.refresh(user)
    return {"prize_won": prize, "new_balance": user.balance, "new_tickets": user.tickets}

async def get_roulette_history(db: AsyncSession, limit: int = 20):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π."""
    result = await db.execute(
        select(models.RouletteWin).order_by(models.RouletteWin.timestamp.desc()).limit(limit)
    )
    return result.scalars().all()

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê (CRON) ---

async def reset_ticket_parts(db: AsyncSession):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —á–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 3 –º–µ—Å—è—Ü–∞."""
    three_months_ago = date.today() - relativedelta(months=3)
    await db.execute(
        update(models.User)
        .where(models.User.last_ticket_part_reset <= three_months_ago)
        .values(ticket_parts=0, last_ticket_part_reset=date.today())
    )
    await db.commit()

async def reset_tickets(db: AsyncSession):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±–∏–ª–µ—Ç–∏–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 4 –º–µ—Å—è—Ü–∞."""
    four_months_ago = date.today() - relativedelta(months=4)
    await db.execute(
        update(models.User)
        .where(models.User.last_ticket_reset <= four_months_ago)
        .values(tickets=0, last_ticket_reset=date.today())
    )
    await db.commit()

# --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–ò –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –í –ö–û–ù–ï–¶ –§–ê–ô–õ–ê ---

async def process_pkpass_file(db: AsyncSession, user_id: int, file_content: bytes):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª .pkpass, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–¢
    –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç—ã.
    """
    user = await db.get(models.User, user_id)
    if not user:
        return None

    try:
        with zipfile.ZipFile(io.BytesIO(file_content), 'r') as pass_zip:
            pass_json_bytes = pass_zip.read('pass.json')
            pass_data = json.loads(pass_json_bytes)
            
            # --- 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
            
            # –®—Ç—Ä–∏—Ö-–∫–æ–¥ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
            barcode_data = pass_data.get('barcode', {}).get('message')
            if not barcode_data:
                raise ValueError("Barcode data not found in pass.json")

            # –ë–∞–ª–∞–Ω—Å (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
            card_balance = "0"
            header_fields = pass_data.get('storeCard', {}).get('headerFields', [])
            for field in header_fields:
                if field.get('key') == 'field0': # –°—É–¥—è –ø–æ —Ñ–∞–π–ª—É, –∫–ª—é—á –±–∞–ª–∞–Ω—Å–∞ 'field0'
                    card_balance = str(field.get('value'))
                    break
            
            # --- 2. –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò: –ò–∑–≤–ª–µ–∫–∞–µ–º –ò–º—è –∏ –§–∞–º–∏–ª–∏—é ---
            full_name_from_card = None
            auxiliary_fields = pass_data.get('storeCard', {}).get('auxiliaryFields', [])
            for field in auxiliary_fields:
                # –ò—â–µ–º –ø–æ–ª–µ, –≥–¥–µ label "–í–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã"
                if field.get('label') == '–í–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã':
                    full_name_from_card = field.get('value')
                    break

            # --- 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏–º—è –Ω–∞–π–¥–µ–Ω–æ ---
            if full_name_from_card:
                # –î–µ–ª–∏–º "–í–∏–∫—Ç–æ—Ä–∏—è –ù–∏–∫—É–ª–∏–Ω–∞" –Ω–∞ ["–í–∏–∫—Ç–æ—Ä–∏—è", "–ù–∏–∫—É–ª–∏–Ω–∞"]
                name_parts = full_name_from_card.split()
                first_name_from_card = name_parts[0] if len(name_parts) > 0 else ""
                last_name_from_card = " ".join(name_parts[1:]) if len(name_parts) > 1 else ""

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
                if user.first_name != first_name_from_card and first_name_from_card:
                    user.first_name = first_name_from_card
                if user.last_name != last_name_from_card and last_name_from_card:
                    user.last_name = last_name_from_card
            
            # --- 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å ---
            user.card_barcode = barcode_data
            user.card_balance = card_balance
            
            await db.commit()
            await db.refresh(user)
            return user
            
    except Exception as e:
        print(f"Error processing pkpass file: {e}")
        return None

async def delete_user_card(db: AsyncSession, user_id: int):
    user = await db.get(models.User, user_id)
    if user:
        user.card_barcode = None
        user.card_balance = None # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –±–∞–ª–∞–Ω—Å ---
        await db.commit()
        await db.refresh(user)
    return user

# ... (–≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ delete_user_card)

# --- –ù–ê–ß–ê–õ–û: –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ì–õ–ê–°–û–í–ê–ù–ò–Ø –ü–†–û–§–ò–õ–Ø ---

async def request_profile_update(db: AsyncSession, user: models.User, update_data: schemas.ProfileUpdateRequest):
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º.
    """
    
    # 1. –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    old_data = {
        "last_name": user.last_name,
        "department": user.department,
        "position": user.position,
        "phone_number": user.phone_number,
        "date_of_birth": user.date_of_birth.isoformat() if user.date_of_birth else None
    }
    
    # 2. –°–æ–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    # (exclude_unset=True –≤–∞–∂–µ–Ω, –Ω–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∏—à–ª–µ—Ç –≤—Å–µ –ø–æ–ª—è, –≤–∫–ª—é—á–∞—è –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ)
    new_data_raw = update_data.model_dump() 
    
    # 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–æ–ª—å–∫–æ –†–ï–ê–õ–¨–ù–´–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è
    actual_new_data = {}
    has_changes = False
    for key, new_val in new_data_raw.items():
        old_val = old_data.get(key)
        if str(old_val or "") != str(new_val or ""): # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
             actual_new_data[key] = new_val
             has_changes = True

    if not has_changes:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–≤
        raise ValueError("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # 4. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ PendingUpdate
    db_update_request = models.PendingUpdate(
        user_id=user.id,
        old_data=old_data, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        new_data=actual_new_data # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    )
    db.add(db_update_request)
    await db.commit()
    await db.refresh(db_update_request)

    # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)
    message_lines = [
        f"üë§ *–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç:* @{user.username or user.first_name} ({user.last_name})\n"
    ]
    
    for key, new_val in actual_new_data.items():
        old_val = old_data.get(key)
        field_name = key.replace('_', ' ').capitalize()
        message_lines.append(f"*{field_name}*:\n  ‚Ü≥ –°—Ç–∞—Ä–æ–µ: `{old_val or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`\n  ‚Ü≥ –ù–æ–≤–æ–µ: `{new_val or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`\n")

    # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_message_text = "\n".join(message_lines)
    
    keyboard = {
        "inline_keyboard": [
            [
                {"text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", "callback_data": f"approve_update_{db_update_request.id}"},
                {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject_update_{db_update_request.id}"}
            ]
        ]
    }

    await send_telegram_message(
        chat_id=settings.TELEGRAM_CHAT_ID,
        text=admin_message_text,
        reply_markup=keyboard,
        message_thread_id=settings.TELEGRAM_UPDATE_TOPIC_ID # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    )
    
    return db_update_request


async def process_profile_update(db: AsyncSession, update_id: int, action: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (–û–¥–æ–±—Ä–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å) –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (user, status)
    """
    # 1. –ù–∞—Ö–æ–¥–∏–º —Å–∞–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    result = await db.execute(select(models.PendingUpdate).where(models.PendingUpdate.id == update_id))
    pending_update = result.scalars().first()
    
    if not pending_update or pending_update.status != 'pending':
        # –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        return None, None 

    user = await get_user(db, pending_update.user_id)
    if not user:
        await db.delete(pending_update) # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º "–º—É—Å–æ—Ä–Ω—ã–π" –∑–∞–ø—Ä–æ—Å
        await db.commit()
        return None, None

    if action == "approve":
        # 3. –û–î–û–ë–†–ï–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ new_data) –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for key, value in pending_update.new_data.items():
            if key == 'date_of_birth' and value:
                try:
                    value = date.fromisoformat(value)
                except (ValueError, TypeError):
                    value = None
            setattr(user, key, value) # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        pending_update.status = "approved"
        await db.delete(pending_update) # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await db.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        
        return user, "approved"
        
    elif action == "reject":
        # 4. –û–¢–ö–õ–û–ù–ï–ù–û: –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        pending_update.status = "rejected"
        await db.delete(pending_update)
        await db.commit()
        
        return user, "rejected"

    return None, None

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
async def search_users_by_name(db: AsyncSession, query: str):
    """
    –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –≤ –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º–µ.
    –ü–æ–∏—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π.
    """
    if not query:
        return []
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ "–≤–Ω—É—Ç—Ä–∏" —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∞–Ω" –Ω–∞–π–¥–µ—Ç "–ò–≤–∞–Ω")
    search_query = f"%{query}%"
    
    result = await db.execute(
        select(models.User).filter(
            or_(
                models.User.first_name.ilike(search_query),
                # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–ª–µ last_name, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ
                # models.User.last_name.ilike(search_query),
                models.User.username.ilike(search_query)
            )
        ).limit(20) # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥, —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç—ã—Å—è—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    )
    return result.scalars().all()

# --- –ù–ê–ß–ê–õ–û: –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---

async def get_all_users_for_admin(db: AsyncSession):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    result = await db.execute(select(models.User).order_by(models.User.last_name))
    return result.scalars().all()

async def admin_update_user(db: AsyncSession, user_id: int, user_data: schemas.AdminUserUpdate, admin_user: models.User):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥.
    (–í–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    """
    user = await get_user(db, user_id)
    if not user:
        return None
    
    update_data = user_data.model_dump(exclude_unset=True)
    changes_log = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    for key, new_value in update_data.items():
        old_value = getattr(user, key, None)
        
        # --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô, –£–ú–ù–û–ô –õ–û–ì–ò–ö–ò –°–†–ê–í–ù–ï–ù–ò–Ø ---
        is_changed = False
        
        # 1. –û—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É, —Ç.–∫. —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç date –∏ —Å—Ç—Ä–æ–∫—É
        if isinstance(old_value, date):
            old_value_str = old_value.isoformat()
            if old_value_str != new_value:
                is_changed = True
        # 2. –û—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º None –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        elif (old_value is None and new_value != "") or \
             (new_value is None and old_value != ""):
            # –°—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –±—ã–ª–æ "–Ω–∏—á–µ–≥–æ", –∞ —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ (–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
            # –≠—Ç–æ –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ç–∞–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
            if str(old_value) != str(new_value):
                 is_changed = True
        # 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã (—á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏, –±—É–ª–µ–≤—ã) –Ω–∞–ø—Ä—è–º—É—é
        elif type(old_value) != type(new_value) and old_value is not None:
             # –ï—Å–ª–∏ —Ç–∏–ø—ã —Ä–∞–∑–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, int –∏ str), –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Ç–∏–ø—É –∏–∑ –ë–î
             try:
                 if old_value != type(old_value)(new_value):
                     is_changed = True
             except (ValueError, TypeError):
                 is_changed = True # –ù–µ —Å–º–æ–≥–ª–∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç–∏–ø—ã - —Ç–æ—á–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        elif old_value != new_value:
            is_changed = True
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –°–†–ê–í–ù–ï–ù–ò–Ø ---

        if is_changed:
            changes_log.append(f"  - {key}: `{old_value}` -> `{new_value}`")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –æ–±—ä–µ–∫—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è –¥–∞—Ç—É)
        if key == 'date_of_birth' and new_value:
            try:
                setattr(user, key, date.fromisoformat(new_value))
            except (ValueError, TypeError):
                setattr(user, key, None)
        else:
            setattr(user, key, new_value)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if changes_log:
        await db.commit()
        await db.refresh(user)

        admin_name = f"@{admin_user.username}" if admin_user.username else f"{admin_user.first_name} {admin_user.last_name}"
        target_user_name = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name}"
        
        log_message = (
            f"‚úèÔ∏è *–ê–¥–º–∏–Ω –∏–∑–º–µ–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
            f"üéØ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {target_user_name}\n\n"
            f"*–ò–∑–º–µ–Ω–µ–Ω–∏—è:*\n" + "\n".join(changes_log)
        )
        
        await bot.send_telegram_message(
            chat_id=settings.TELEGRAM_CHAT_ID,
            text=log_message,
            message_thread_id=settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
        )
    else:
        # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        pass

    return user

# --- —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
async def admin_delete_user(db: AsyncSession, user_id: int, admin_user: models.User):
    """–ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–¥–∞–ª—è—è –µ–≥–æ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ç–æ—Ä–∏—é."""
    user_to_anonymize = await db.get(models.User, user_id)
    if not user_to_anonymize:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –≤ —Ä–æ—É—Ç–µ—Ä–µ
        return None
    if user_to_anonymize.id == admin_user.id:
        raise ValueError("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è.")

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è ---

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –ª–æ–≥–∞, –ø–æ–∫–∞ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—Ç–µ—Ä—Ç—ã
    admin_name = f"{admin_user.first_name} {admin_user.last_name or ''}".strip()
    target_user_name = f"{user_to_anonymize.first_name} {user_to_anonymize.last_name or ''}".strip()

    # 2. –ó–∞—Ç–∏—Ä–∞–µ–º –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_to_anonymize.first_name = "–£–¥–∞–ª–µ–Ω–Ω—ã–π"
    user_to_anonymize.last_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_to_anonymize.telegram_id = None  # <-- –¢—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏
    user_to_anonymize.username = None       # <-- –¢—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏
    user_to_anonymize.phone_number = None
    user_to_anonymize.telegram_photo_url = None
    user_to_anonymize.is_admin = False
    user_to_anonymize.status = "deleted" # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–æ–≤

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
    db.add(user_to_anonymize)
    await db.commit()

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏
    log_message = (
        f"üóëÔ∏è *–ê–¥–º–∏–Ω –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name} (`{admin_user.id}`)\n"
        f"üéØ *–ë—ã–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {target_user_name} (`{user_id}`)\n\n"
        f"–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–µ—Ä—Ç—ã, –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
    )
    
    await bot.send_telegram_message(
        chat_id=config.settings.TELEGRAM_CHAT_ID,
        text=log_message,
        message_thread_id=config.settings.TELEGRAM_ADMIN_LOG_TOPIC_ID
    )

    # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π (—Ç–µ–ø–µ—Ä—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π) –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return user_to_anonymize

# --- –î–û–ë–ê–í–¨ –≠–¢–£ –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –í –ö–û–ù–ï–¶ –§–ê–ô–õ–ê ---
async def get_leaderboards_status(db: AsyncSession):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –Ω–µ –ø—É—Å—Ç—ã."""
    
    periods = {
        'current_month': (
            datetime.utcnow().replace(day=1, hour=0, minute=0, second=0, microsecond=0),
            datetime.utcnow()
        ),
        'last_month': (
            (datetime.utcnow().replace(day=1) - timedelta(days=1)).replace(day=1, hour=0, minute=0, second=0, microsecond=0),
            datetime.utcnow().replace(day=1) - timedelta(seconds=1)
        ),
        'all_time': (None, None)
    }
    
    statuses = []
    
    for period_key, (start_date, end_date) in periods.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è "–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"
        query_received = select(func.count(models.Transaction.id))
        if start_date and end_date:
            query_received = query_received.where(models.Transaction.timestamp.between(start_date, end_date))
        count_received = await db.scalar(query_received)
        statuses.append({ "id": f"{period_key}_received", "has_data": count_received > 0 })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π" (—â–µ–¥—Ä–æ—Å—Ç—å)
        query_sent = select(func.count(models.Transaction.id))
        if start_date and end_date:
            query_sent = query_sent.where(models.Transaction.timestamp.between(start_date, end_date))
        count_sent = await db.scalar(query_sent)
        statuses.append({ "id": f"{period_key}_sent", "has_data": count_sent > 0 })
            
    return statuses

# --- –ù–ê–ß–ê–õ–û: –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
def _prepare_dates(start_date: Optional[date], end_date: Optional[date]):
    if end_date is None:
        end_date = datetime.utcnow().date()
    if start_date is None:
        start_date = end_date - timedelta(days=30)
    
    # --- –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º 1 –¥–µ–Ω—å –∫ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–µ ---
    # –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤–µ—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω (–¥–æ 23:59:59)
    end_date_inclusive = end_date + timedelta(days=1)
    
    return start_date, end_date_inclusive

async def get_general_statistics(db: AsyncSession, start_date: Optional[date] = None, end_date: Optional[date] = None):
    start_date, end_date_inclusive = _prepare_dates(start_date, end_date)
        
    query_total_users = select(func.count(models.User.id)).where(models.User.status != 'deleted')
    total_users = (await db.execute(query_total_users)).scalar_one()

    active_senders_q = select(models.Transaction.sender_id).join(
        models.User, models.User.id == models.Transaction.sender_id
    ).where(
        models.Transaction.timestamp.between(start_date, end_date_inclusive),
        models.User.status != 'deleted'
    ).distinct()

    active_receivers_q = select(models.Transaction.receiver_id).join(
        models.User, models.User.id == models.Transaction.receiver_id
    ).where(
        models.Transaction.timestamp.between(start_date, end_date_inclusive),
        models.User.status != 'deleted'
    ).distinct()

    active_senders_ids = (await db.execute(active_senders_q)).scalars().all()
    active_receivers_ids = (await db.execute(active_receivers_q)).scalars().all()
    active_users_count = len(set(active_senders_ids).union(set(active_receivers_ids)))

    query_transactions = select(func.count(models.Transaction.id)).filter(models.Transaction.timestamp.between(start_date, end_date_inclusive))
    transactions_count = (await db.execute(query_transactions)).scalar_one()

    query_purchases = select(func.count(models.Purchase.id)).filter(models.Purchase.timestamp.between(start_date, end_date_inclusive))
    shop_purchases = (await db.execute(query_purchases)).scalar_one()

    query_turnover = select(func.sum(models.Transaction.amount)).filter(models.Transaction.timestamp.between(start_date, end_date_inclusive))
    total_turnover = (await db.execute(query_turnover)).scalar_one_or_none() or 0

    query_spent = (
        select(func.sum(models.MarketItem.price))
        .join(models.Purchase, models.Purchase.item_id == models.MarketItem.id)
        .filter(models.Purchase.timestamp.between(start_date, end_date_inclusive))
    )
    total_store_spent = (await db.execute(query_spent)).scalar_one_or_none() or 0

    return {
        "new_users_count": total_users,
        "active_users_count": active_users_count,
        "transactions_count": transactions_count,
        "store_purchases_count": shop_purchases,
        "total_turnover": total_turnover,
        "total_store_spent": total_store_spent,
    }

async def get_hourly_activity_stats(db: AsyncSession, start_date: Optional[date] = None, end_date: Optional[date] = None):
    start_date, end_date_inclusive = _prepare_dates(start_date, end_date)
    
    moscow_time = models.Transaction.timestamp.op("AT TIME ZONE")('UTC').op("AT TIME ZONE")('Europe/Moscow')
    
    query = (
        select(
            extract('hour', moscow_time).label('hour'),
            func.count(models.Transaction.id).label('transaction_count')
        )
        .join(models.User, models.User.id == models.Transaction.sender_id)
        .filter(
            models.Transaction.timestamp.between(start_date, end_date_inclusive),
            models.User.status != 'deleted'
        )
        .group_by(extract('hour', moscow_time))
    )
    result = await db.execute(query)
    activity = result.all()
    hourly_stats = {hour: 0 for hour in range(24)}
    for row in activity:
        if row.hour is not None: hourly_stats[row.hour] = row.transaction_count
    return hourly_stats

async def get_login_activity_stats(db: AsyncSession, start_date: Optional[date] = None, end_date: Optional[date] = None):
    start_date, end_date_inclusive = _prepare_dates(start_date, end_date)
    
    moscow_time = models.User.last_login_date.op("AT TIME ZONE")('UTC').op("AT TIME ZONE")('Europe/Moscow')

    query = (
        select(
            extract('hour', moscow_time).label('hour'),
            func.count(models.User.id).label('login_count')
        )
        .filter(
            models.User.last_login_date.between(start_date, end_date_inclusive),
            models.User.status != 'deleted'
        )
        .group_by(extract('hour', moscow_time))
    )
    result = await db.execute(query)
    activity = result.all()
    hourly_stats = {hour: 0 for hour in range(24)}
    for row in activity:
        if row.hour is not None: hourly_stats[row.hour] = row.login_count
    return hourly_stats
    
async def get_user_engagement_stats(db: AsyncSession, start_date: Optional[date] = None, end_date: Optional[date] = None, limit: int = 5):
    if end_date is None: end_date = datetime.utcnow().date()
    if start_date is None: start_date = end_date - timedelta(days=365*5)
    end_date_inclusive = end_date + timedelta(days=1)

    query_senders = (
        select(models.User, func.count(models.Transaction.id).label('sent_count'))
        .join(models.Transaction, models.User.id == models.Transaction.sender_id)
        .filter(
            models.Transaction.timestamp.between(start_date, end_date_inclusive),
            models.User.status != 'deleted'
        )
        .group_by(models.User.id)
        .order_by(func.count(models.Transaction.id).desc()).limit(limit)
    )
    top_senders = (await db.execute(query_senders)).all()

    query_receivers = (
        select(models.User, func.count(models.Transaction.id).label('received_count'))
        .join(models.Transaction, models.User.id == models.Transaction.receiver_id)
        .filter(
            models.Transaction.timestamp.between(start_date, end_date_inclusive),
            models.User.status != 'deleted'
        )
        .group_by(models.User.id)
        .order_by(func.count(models.Transaction.id).desc()).limit(limit)
    )
    top_receivers = (await db.execute(query_receivers)).all()
    
    return {"top_senders": top_senders, "top_receivers": top_receivers}

async def get_popular_items_stats(db: AsyncSession, start_date: Optional[date] = None, end_date: Optional[date] = None, limit: int = 10):
    if end_date is None: end_date = datetime.utcnow().date()
    if start_date is None: start_date = end_date - timedelta(days=365*5)
    end_date_inclusive = end_date + timedelta(days=1)

    query = (
        select(models.MarketItem, func.count(models.Purchase.id).label('purchase_count'))
        .join(models.Purchase, models.MarketItem.id == models.Purchase.item_id, isouter=True)
        .filter(models.Purchase.timestamp.between(start_date, end_date_inclusive))
        .group_by(models.MarketItem.id).order_by(func.count(models.Purchase.id).desc()).limit(limit)
    )
    return (await db.execute(query)).all()

async def get_inactive_users(db: AsyncSession, start_date: Optional[date] = None, end_date: Optional[date] = None):
    start_date, end_date_inclusive = _prepare_dates(start_date, end_date)

    active_senders_q = select(models.Transaction.sender_id).filter(models.Transaction.timestamp.between(start_date, end_date_inclusive)).distinct()
    active_recipients_q = select(models.Transaction.receiver_id).filter(models.Transaction.timestamp.between(start_date, end_date_inclusive)).distinct()
    
    active_senders = (await db.execute(active_senders_q)).scalars().all()
    active_recipients = (await db.execute(active_recipients_q)).scalars().all()
    
    active_user_ids = set(active_senders).union(set(active_recipients))
    
    return (await db.execute(select(models.User).filter(
        models.User.id.notin_(active_user_ids),
        models.User.status != 'deleted'
    ))).scalars().all()
    
async def get_total_balance(db: AsyncSession):
    total = (await db.execute(
        select(func.sum(models.User.balance)).where(models.User.status != 'deleted')
    )).scalar_one_or_none()
    return total or 0

async def get_active_user_ratio(db: AsyncSession):
    total_users = (await db.execute(
        select(func.count(models.User.id)).where(models.User.status != 'deleted')
    )).scalar_one()

    active_senders_q = select(models.Transaction.sender_id).join(
        models.User, models.User.id == models.Transaction.sender_id
    ).where(models.User.status != 'deleted').distinct()
    
    active_recipients_q = select(models.Transaction.receiver_id).join(
        models.User, models.User.id == models.Transaction.receiver_id
    ).where(models.User.status != 'deleted').distinct()

    active_senders = (await db.execute(active_senders_q)).scalars().all()
    active_recipients = (await db.execute(active_recipients_q)).scalars().all()
    
    active_user_ids_count = len(set(active_senders).union(set(active_recipients)))
    inactive_users_count = total_users - active_user_ids_count
    return {"active_users": active_user_ids_count, "inactive_users": inactive_users_count}

async def get_average_session_duration(db: AsyncSession, start_date: Optional[date] = None, end_date: Optional[date] = None):
    start_date, end_date_inclusive = _prepare_dates(start_date, end_date)

    session_duration = func.extract('epoch', models.UserSession.last_seen - models.UserSession.session_start)
    
    query = (
        select(func.avg(session_duration))
        .join(models.User, models.User.id == models.UserSession.user_id)
        .filter(
            models.UserSession.session_start.between(start_date, end_date_inclusive),
            models.User.status != 'deleted'
        )
    )
    
    average_seconds = (await db.execute(query)).scalar_one_or_none() or 0
    average_minutes = round(average_seconds / 60, 2)
    
    return {"average_duration_minutes": average_minutes}

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø ---

async def mark_onboarding_as_seen(db: AsyncSession, user_id: int):
    """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –æ–±—É—á–µ–Ω–∏–µ."""
    user = await db.get(models.User, user_id)
    if user:
        user.has_seen_onboarding = True
        await db.commit()
        await db.refresh(user)
    return user
