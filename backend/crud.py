# backend/crud.py
import math # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –≤–≤–µ—Ä—Ö—É
from datetime import datetime # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –≤–≤–µ—Ä—Ö—É
from sqlalchemy.future import select
from sqlalchemy import func, update 
from sqlalchemy.ext.asyncio import AsyncSession
import models, schemas
from bot import send_telegram_message
from database import settings
from datetime import datetime, timedelta, date
import random # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from dateutil.relativedelta import relativedelta # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
async def get_user(db: AsyncSession, user_id: int):
    result = await db.execute(select(models.User).where(models.User.id == user_id))
    return result.scalars().first()

async def get_user_by_telegram(db: AsyncSession, telegram_id: int):
    result = await db.execute(select(models.User).where(models.User.telegram_id == telegram_id))
    return result.scalars().first()

async def create_user(db: AsyncSession, user: schemas.RegisterRequest):
    user_telegram_id = int(user.telegram_id)
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞ ---
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: "727331113,12345678"
    admin_ids_str = settings.TELEGRAM_ADMIN_IDS
    # 2. –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª: [727331113, 12345678]
    admin_ids = [int(id.strip()) for id in admin_ids_str.split(',')]
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ
    is_admin = user_telegram_id in admin_ids
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    dob = None
    if user.date_of_birth and user.date_of_birth.strip():
        try:
            dob = date.fromisoformat(user.date_of_birth)
        except (ValueError, TypeError):
            dob = None

    db_user = models.User(
        telegram_id=user_telegram_id,
        first_name=user.first_name,
        last_name=user.last_name,
        position=user.position,
        department=user.department,
        username=user.username,
        is_admin=is_admin,
        phone_number=user.phone_number,
        date_of_birth=dob,
        last_login_date=date.today()
    )
    db.add(db_user)
    await db.commit()
    await db.refresh(db_user)

    try:
        user_info = (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n"
            f"üë§ **–ò–º—è:** {db_user.first_name} {db_user.last_name}\n"
            f"üè¢ **–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:** {db_user.department}\n"
            f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {db_user.position}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {db_user.phone_number or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üéÇ **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** {db_user.date_of_birth or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üÜî **Telegram ID:** {db_user.telegram_id}"
        )

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ö–ù–û–ü–û–ö ---
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"approve_{db_user.id}"},
                    {"text": "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", "callback_data": f"reject_{db_user.id}"}
                ]
            ]
        }
        
        await send_telegram_message(
            chat_id=settings.TELEGRAM_CHAT_ID,
            text=user_info,
            reply_markup=keyboard,
            message_thread_id=settings.TELEGRAM_ADMIN_TOPIC_ID
        )
    except Exception as e:
        print(f"FAILED to send admin notification. Error: {e}")
    
    return db_user

async def get_users(db: AsyncSession):
    result = await db.execute(select(models.User))
    return result.scalars().all()

async def update_user_profile(db: AsyncSession, user_id: int, data: schemas.UserUpdate):
    user = await get_user(db, user_id)
    if not user:
        return None
    
    update_data = data.model_dump(exclude_unset=True)
    
    for key, value in update_data.items():
        if key == 'date_of_birth' and value:
            try:
                value = date.fromisoformat(value)
            except (ValueError, TypeError):
                value = None
        setattr(user, key, value)
        
    await db.commit()
    await db.refresh(user)
    return user

# –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def create_transaction(db: AsyncSession, tr: schemas.TransferRequest):
    today = date.today()
    sender = await db.get(models.User, tr.sender_id)
    if not sender:
        raise ValueError("–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if sender.last_login_date < today:
        sender.daily_transfer_count = 0
        sender.last_login_date = today
    
    # --- –ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã ---
    fixed_amount = 1 # –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ 1
    if sender.daily_transfer_count >= 3: # –õ–∏–º–∏—Ç - 3 –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–µ–Ω—å
        raise ValueError("–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω (3 –≤ –¥–µ–Ω—å)")

    receiver = await db.get(models.User, tr.receiver_id)
    if not receiver:
        raise ValueError("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    sender.daily_transfer_count += 1
    receiver.balance += fixed_amount
    
    db_tr = models.Transaction(
        sender_id=tr.sender_id,
        receiver_id=tr.receiver_id,
        amount=fixed_amount,
        message=tr.message
    )
    db.add(db_tr)
    await db.commit()
    await db.refresh(db_tr)
    
    try:
        message_text = (f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ *{tr.amount}* –±–∞–ª–ª–æ–≤!\n"
                        f"–û—Ç: *{sender.last_name}*\n"
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ: _{tr.message}_")
        await send_telegram_message(chat_id=receiver.telegram_id, text=message_text)
    except Exception as e:
        print(f"Could not send notification to user {receiver.telegram_id}. Error: {e}")
    
    return db_tr

async def get_feed(db: AsyncSession):
    result = await db.execute(
        select(models.Transaction).order_by(models.Transaction.timestamp.desc())
    )
    return result.scalars().all()

async def get_user_transactions(db: AsyncSession, user_id: int):
    result = await db.execute(
        select(models.Transaction)
        .where((models.Transaction.sender_id == user_id) | (models.Transaction.receiver_id == user_id))
        .order_by(models.Transaction.timestamp.desc())
    )
    return result.scalars().all()

# –õ–∏–¥–µ—Ä–±–æ—Ä–¥
async def get_leaderboard(db: AsyncSession, limit: int = 10):
    today = datetime.utcnow()
    first_day_of_current_month = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    last_day_of_last_month = first_day_of_current_month - timedelta(days=1)
    first_day_of_last_month = last_day_of_last_month.replace(day=1)

    result = await db.execute(
        select(
            models.User,
            func.sum(models.Transaction.amount).label("total_received"),
        )
        .join(models.Transaction, models.User.id == models.Transaction.receiver_id)
        .where(models.Transaction.timestamp >= first_day_of_last_month)
        .where(models.Transaction.timestamp < first_day_of_current_month)
        .group_by(models.User.id)
        .order_by(func.sum(models.Transaction.amount).desc())
        .limit(limit)
    )
    
    leaderboard_data = result.all()
    return [{"user": user, "total_received": total_received or 0} for user, total_received in leaderboard_data]

# –ú–∞—Ä–∫–µ—Ç
async def get_market_items(db: AsyncSession):
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç—ã SQLAlchemy,
    # Pydantic —Å–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö —Å–æ–≥–ª–∞—Å–Ω–æ response_model –≤ —Ä–æ—É—Ç–µ—Ä–µ.
    result = await db.execute(select(models.MarketItem))
    return result.scalars().all()

async def get_active_items(db: AsyncSession):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞."""
    result = await db.execute(select(models.MarketItem).where(models.MarketItem.is_archived == False))
    return result.scalars().all()

async def create_market_item(db: AsyncSession, item: schemas.MarketItemCreate):
    db_item = models.MarketItem(**item.model_dump())
    db.add(db_item)
    await db.commit()
    await db.refresh(db_item)
    
    return {
        "id": db_item.id, "name": db_item.name, "description": db_item.description,
        "price": db_item.price, "stock": db_item.stock,
    }
    
async def create_purchase(db: AsyncSession, pr: schemas.PurchaseRequest):
    # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
    item = await db.get(models.MarketItem, pr.item_id)
    user = await db.get(models.User, pr.user_id)

    if not item or not user:
        raise ValueError("Item or User not found")
    if item.stock <= 0:
        raise ValueError("Item out of stock")
    if user.balance < item.price:
        raise ValueError("Insufficient balance")

    # 2. –í–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤, –º—ã —Å–æ–∑–¥–∞–µ–º —è–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    new_balance = user.balance - item.price
    
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_update_stmt = (
        update(models.User)
        .where(models.User.id == pr.user_id)
        .values(balance=new_balance)
    )
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞
    item_update_stmt = (
        update(models.MarketItem)
        .where(models.MarketItem.id == pr.item_id)
        .values(stock=models.MarketItem.stock - 1)
    )

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–∞ –∑–∞–ø—Ä–æ—Å–∞
    await db.execute(user_update_stmt)
    await db.execute(item_update_stmt)

    # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
    db_purchase = models.Purchase(user_id=pr.user_id, item_id=pr.item_id)
    db.add(db_purchase)
    
    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—ç—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    try:
        admin_message = (
            f"üõçÔ∏è *–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.last_name} (@{user.username or user.telegram_id})\n"
            f"üíº *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {user.position}\n\n"
            f"üéÅ *–¢–æ–≤–∞—Ä:* {item.name}\n"
            f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {item.price} –±–∞–ª–ª–æ–≤\n\n"
            f"üìâ *–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {new_balance} –±–∞–ª–ª–æ–≤"
        )
        await send_telegram_message(chat_id=settings.TELEGRAM_CHAT_ID, text=admin_message)
    except Exception as e:
        print(f"Could not send admin notification. Error: {e}")

    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.commit()
    
    # 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    return new_balance
    
# –ê–¥–º–∏–Ω
async def add_points_to_all_users(db: AsyncSession, amount: int):
    await db.execute(update(models.User).values(balance=models.User.balance + amount))
    await db.commit()
    return True

async def reset_balances(db: AsyncSession):
    await db.execute(update(models.User).values(balance=0))
    await db.commit()
    return True

# --- CRUD –î–õ–Ø –ë–ê–ù–ù–ï–†–û–í ---

async def get_active_banners(db: AsyncSession):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã."""
    result = await db.execute(
        select(models.Banner).where(models.Banner.is_active == True)
    )
    return result.scalars().all()

async def get_all_banners(db: AsyncSession):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –±–∞–Ω–Ω–µ—Ä—ã (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)."""
    result = await db.execute(select(models.Banner))
    return result.scalars().all()

async def create_banner(db: AsyncSession, banner: schemas.BannerCreate):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä."""
    db_banner = models.Banner(**banner.model_dump())
    db.add(db_banner)
    await db.commit()
    await db.refresh(db_banner)
    return db_banner

async def update_banner(db: AsyncSession, banner_id: int, banner_data: schemas.BannerUpdate):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–Ω–Ω–µ—Ä."""
    result = await db.execute(select(models.Banner).where(models.Banner.id == banner_id))
    db_banner = result.scalars().first()
    if not db_banner:
        return None
    
    for key, value in banner_data.model_dump(exclude_unset=True).items():
        setattr(db_banner, key, value)
        
    await db.commit()
    await db.refresh(db_banner)
    return db_banner

async def delete_banner(db: AsyncSession, banner_id: int):
    """–£–¥–∞–ª—è–µ—Ç –±–∞–Ω–Ω–µ—Ä."""
    result = await db.execute(select(models.Banner).where(models.Banner.id == banner_id))
    db_banner = result.scalars().first()
    if db_banner:
        await db.delete(db_banner)
        await db.commit()
        return True
    return False

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò ---
async def process_birthday_bonuses(db: AsyncSession):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç 300 –±–∞–ª–ª–æ–≤ –≤—Å–µ–º, —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è."""
    today = date.today()
    users_with_birthday = await db.execute(
        select(models.User).where(
            func.extract('month', models.User.date_of_birth) == today.month,
            func.extract('day', models.User.date_of_birth) == today.day
        )
    )
    users = users_with_birthday.scalars().all()
    
    for user in users:
        user.balance += 300
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–ì
        
    await db.commit()
    return len(users)

# --- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –í –ö–û–ù–ï–¶ –§–ê–ô–õ–ê ---
async def update_user_status(db: AsyncSession, user_id: int, status: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    result = await db.execute(select(models.User).where(models.User.id == user_id))
    user = result.scalars().first()
    if user:
        user.status = status
        await db.commit()
        await db.refresh(user)
    return user

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è, –ø—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã ---
def calculate_spasibki_price(price_rub: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ '—Å–ø–∞—Å–∏–±–∫–∞—Ö' –ø–æ –∫—É—Ä—Å—É 50 —Ä—É–±–ª–µ–π –∑–∞ 1 —Å–ø–∞—Å–∏–±–∫—É."""
    if price_rub <= 0:
        return 0
    return round(price_rub / 50)

def calculate_accumulation_forecast(price_spasibki: int) -> str:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è."""
    # –≠—Ç–æ –æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö.
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ä–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –æ–∫–æ–ª–æ 1000 —Å–ø–∞—Å–∏–±–æ–∫ –≤ –º–µ—Å—è—Ü.
    months_needed = price_spasibki / 15
    
    if months_needed <= 1:
        return "–æ–∫–æ–ª–æ 1 –º–µ—Å—è—Ü–∞"
    elif months_needed <= 18: # –¥–æ 1.5 –ª–µ—Ç
        return f"–æ–∫–æ–ª–æ {round(months_needed)} –º–µ—Å."
    else:
        years = round(months_needed / 12, 1)
        return f"–æ–∫–æ–ª–æ {years} –ª–µ—Ç"

# –ú—ã –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é create_market_item
async def admin_create_market_item(db: AsyncSession, item: schemas.MarketItemCreate):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ü–µ–Ω—ã –≤ —Å–ø–∞—Å–∏–±–∫–∞—Ö."""
    price_spasibki = calculate_spasibki_price(item.price_rub)
    db_item = models.MarketItem(
        name=item.name,
        description=item.description,
        price_rub=item.price_rub,
        price=price_spasibki,
        stock=item.stock,
        is_archived=False
    )
    db.add(db_item)
    await db.commit()
    await db.refresh(db_item)
    return db_item

async def admin_update_market_item(db: AsyncSession, item_id: int, item_data: schemas.MarketItemUpdate):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—è —Ü–µ–Ω—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."""
    db_item = await db.get(models.MarketItem, item_id)
    if not db_item: return None
    update_data = item_data.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        setattr(db_item, key, value)
    if 'price_rub' in update_data:
        db_item.price = calculate_spasibki_price(update_data['price_rub'])
    await db.commit()
    await db.refresh(db_item)
    return db_item
    
async def archive_market_item(db: AsyncSession, item_id: int, restore: bool = False):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä."""
    db_item = await db.get(models.MarketItem, item_id)
    if db_item:
        db_item.is_archived = not restore
        db_item.archived_at = datetime.utcnow() if not restore else None
        await db.commit()
        return True
    return False

async def get_archived_items(db: AsyncSession):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
    result = await db.execute(select(models.MarketItem).where(models.MarketItem.is_archived == True))
    return result.scalars().all()

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–∏–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ ---
async def create_transaction(db: AsyncSession, tr: schemas.TransferRequest):
    # ... (–∫–æ–¥ –¥–æ sender.daily_transfer_count += 1)
    sender.daily_transfer_count += 1
    # --- –ù–ê–ß–ê–õ–û –î–û–ë–ê–í–õ–ï–ù–ò–ô ---
    sender.ticket_parts += 1 # –ù–∞—á–∏—Å–ª—è–µ–º 1 —á–∞—Å—Ç—å –±–∏–ª–µ—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–µ–≤–æ–¥
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–ô ---
    receiver.balance += fixed_amount
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏)

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–£–õ–ï–¢–ö–ò ---

async def assemble_tickets(db: AsyncSession, user_id: int):
    """–°–æ–±–∏—Ä–∞–µ—Ç —á–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–∏–∫–æ–≤ –≤ —Ü–µ–ª—ã–µ –±–∏–ª–µ—Ç—ã (2 –∫ 1)."""
    user = await db.get(models.User, user_id)
    if not user or user.ticket_parts < 2:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏ –±–∏–ª–µ—Ç–∞.")
    
    new_tickets = user.ticket_parts // 2
    user.tickets += new_tickets
    user.ticket_parts %= 2 # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ (0 –∏–ª–∏ 1)
    
    await db.commit()
    await db.refresh(user)
    return user

async def spin_roulette(db: AsyncSession, user_id: int):
    """–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Ä—É–ª–µ—Ç–∫—É, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –≤—ã–∏–≥—Ä—ã—à."""
    user = await db.get(models.User, user_id)
    if not user or user.tickets < 1:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏.")

    user.tickets -= 1

    # –õ–æ–≥–∏–∫–∞ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —à–∞–Ω—Å–∞
    rand = random.random() # –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0
    if rand < 0.05: # 5% —à–∞–Ω—Å
        prize = random.randint(16, 30)
    elif rand < 0.35: # 30% —à–∞–Ω—Å (0.05 + 0.30)
        prize = random.randint(6, 15)
    else: # 65% —à–∞–Ω—Å
        prize = random.randint(1, 5)

    user.balance += prize

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –≤ –∏—Å—Ç–æ—Ä–∏—é
    win_record = models.RouletteWin(user_id=user_id, amount=prize)
    db.add(win_record)
    
    await db.commit()
    await db.refresh(user)
    return {"prize_won": prize, "new_balance": user.balance, "new_tickets": user.tickets}

async def get_roulette_history(db: AsyncSession, limit: int = 20):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π."""
    result = await db.execute(
        select(models.RouletteWin).order_by(models.RouletteWin.timestamp.desc()).limit(limit)
    )
    return result.scalars().all()

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê (CRON) ---

async def reset_ticket_parts(db: AsyncSession):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —á–∞—Å—Ç–∏ –±–∏–ª–µ—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 3 –º–µ—Å—è—Ü–∞."""
    three_months_ago = date.today() - relativedelta(months=3)
    await db.execute(
        update(models.User)
        .where(models.User.last_ticket_part_reset <= three_months_ago)
        .values(ticket_parts=0, last_ticket_part_reset=date.today())
    )
    await db.commit()

async def reset_tickets(db: AsyncSession):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±–∏–ª–µ—Ç–∏–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 4 –º–µ—Å—è—Ü–∞."""
    four_months_ago = date.today() - relativedelta(months=4)
    await db.execute(
        update(models.User)
        .where(models.User.last_ticket_reset <= four_months_ago)
        .values(tickets=0, last_ticket_reset=date.today())
    )
    await db.commit()
