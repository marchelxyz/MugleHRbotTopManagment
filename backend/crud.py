# backend/crud.py
from sqlalchemy.future import select
from sqlalchemy import func, update
from sqlalchemy.orm import noload
from sqlalchemy.ext.asyncio import AsyncSession
import models, schemas

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
async def get_user(db: AsyncSession, user_id: int):
    result = await db.execute(select(models.User).where(models.User.id == user_id))
    return result.scalars().first()

async def get_user_by_telegram(db: AsyncSession, telegram_id: int):
    result = await db.execute(select(models.User).where(models.User.telegram_id == telegram_id))
    return result.scalars().first()

async def create_user(db: AsyncSession, user: schemas.RegisterRequest):
    user_telegram_id = int(user.telegram_id)
    is_admin = (user_telegram_id == settings.TELEGRAM_ADMIN_ID)
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –î–ê–¢–´ ---
    dob = None
    if user.date_of_birth and user.date_of_birth.strip():
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É "YYYY-MM-DD" –≤ –æ–±—ä–µ–∫—Ç date
            dob = date.fromisoformat(user.date_of_birth)
        except (ValueError, TypeError):
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º None
            dob = None

    db_user = models.User(
        telegram_id=user_telegram_id,
        position=user.position,
        last_name=user.last_name,
        department=user.department,
        username=user.username,
        is_admin=is_admin,
        phone_number=user.phone_number,
        date_of_birth=dob
    )
    db.add(db_user)
    await db.commit()
    await db.refresh(db_user)
    return db_user

async def get_users(db: AsyncSession):
    result = await db.execute(select(models.User))
    return result.scalars().all()

async def update_user_profile(db: AsyncSession, user_id: int, data: schemas.UserUpdate):
    user = await get_user(db, user_id)
    if not user:
        return None
    
    update_data = data.model_dump(exclude_unset=True)
    
    for key, value in update_data.items():
        if key == 'date_of_birth' and value:
            try:
                value = date.fromisoformat(value)
            except (ValueError, TypeError):
                value = None
        setattr(user, key, value)
        
    await db.commit()
    await db.refresh(user)
    return user

# –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def create_transaction(db: AsyncSession, tr: schemas.TransferRequest):

    # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π FOR UPDATE
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π –Ω–µ —Å–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏, –ø–æ–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
    sender_stmt = select(models.User).where(models.User.id == tr.sender_id).with_for_update()
    receiver_stmt = select(models.User).where(models.User.id == tr.receiver_id).with_for_update()

    sender_result = await db.execute(sender_stmt)
    sender = sender_result.scalars().first()
    
    receiver_result = await db.execute(receiver_stmt)
    receiver = receiver_result.scalars().first()

    if not sender or not receiver:
        raise ValueError("Sender or Receiver not found")
        
    # –¢–µ–ø–µ—Ä—å —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–∞–¥–µ–∂–Ω–∞
    if sender.balance < tr.amount:
        raise ValueError("Insufficient balance")

    sender.balance -= tr.amount
    receiver.balance += tr.amount
    
    db_tr = models.Transaction(
        sender_id=tr.sender_id,
        receiver_id=tr.receiver_id,
        amount=tr.amount,
        message=tr.message
    )
    db.add(db_tr)
    await db.commit()
    await db.refresh(db_tr)
    
    try:
        message_text = (f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ *{tr.amount}* –±–∞–ª–ª–æ–≤!\n"
                        f"–û—Ç: *{sender.last_name}*\n"
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ: _{tr.message}_")
        await send_telegram_message(chat_id=receiver.telegram_id, text=message_text)
    except Exception as e:
        print(f"Could not send notification to user {receiver.telegram_id}. Error: {e}")
    
    return db_tr

async def get_feed(db: AsyncSession):
    result = await db.execute(
        select(models.Transaction).order_by(models.Transaction.timestamp.desc())
    )
    return result.scalars().all()

async def get_user_transactions(db: AsyncSession, user_id: int):
    result = await db.execute(
        select(models.Transaction)
        .where((models.Transaction.sender_id == user_id) | (models.Transaction.receiver_id == user_id))
        .order_by(models.Transaction.timestamp.desc())
    )
    return result.scalars().all()

# –õ–∏–¥–µ—Ä–±–æ—Ä–¥
async def get_leaderboard(db: AsyncSession, limit: int = 10):
    today = datetime.utcnow()
    first_day_of_current_month = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    last_day_of_last_month = first_day_of_current_month - timedelta(days=1)
    first_day_of_last_month = last_day_of_last_month.replace(day=1)

    result = await db.execute(
        select(
            models.User,
            func.sum(models.Transaction.amount).label("total_received"),
        )
        .join(models.Transaction, models.User.id == models.Transaction.receiver_id)
        .where(models.Transaction.timestamp >= first_day_of_last_month)
        .where(models.Transaction.timestamp < first_day_of_current_month)
        .group_by(models.User.id)
        .order_by(func.sum(models.Transaction.amount).desc())
        .limit(limit)
    )
    
    leaderboard_data = result.all()
    return [{"user": user, "total_received": total_received or 0} for user, total_received in leaderboard_data]

# –ú–∞—Ä–∫–µ—Ç
async def get_market_items(db: AsyncSession):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.
    """
    # 1. –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
    result = await db.execute(select(models.MarketItem))
    items_from_db = result.scalars().all()

    # 2. –ö–õ–Æ–ß–ï–í–û–ô –®–ê–ì: –í—Ä—É—á–Ω—É—é —Å–æ–∑–¥–∞–µ–º "–ø–ª–æ—Å–∫–∏–π" —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞,
    # —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –Ω–µ –æ–±—ä–µ–∫—Ç—ã —Å –∏—Ö —Å–≤—è–∑—è–º–∏, –∞ –ø—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.
    items_for_response = [
        {
            "id": item.id,
            "name": item.name,
            "description": item.description,
            "price": item.price,
            "stock": item.stock,
        }
        for item in items_from_db
    ]

    return items_for_response

async def create_market_item(db: AsyncSession, item: schemas.MarketItemCreate):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    db_item = models.MarketItem(**item.model_dump())
    db.add(db_item)
    await db.commit()
    await db.refresh(db_item)
    return db_item
    
async def create_purchase(db: AsyncSession, pr: schemas.PurchaseRequest):
    item = await db.get(models.MarketItem, pr.item_id)
    user = await db.get(models.User, pr.user_id)

    if not item or not user:
        raise ValueError("Item or User not found")
    if item.stock <= 0:
        raise ValueError("Item out of stock")
    if user.balance < item.price:
        raise ValueError("Insufficient balance")

    item.stock -= 1
    user.balance -= item.price
    db_purchase = models.Purchase(user_id=pr.user_id, item_id=pr.item_id)
    db.add(db_purchase)
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    try:
        user_message = (
            f"‚úÖ *–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
            f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: *{item.name}*.\n"
            f"–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ *{item.price}* –±–∞–ª–ª–æ–≤.\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{user.balance}* –±–∞–ª–ª–æ–≤."
        )
        await send_telegram_message(chat_id=user.telegram_id, text=user_message)
    except Exception as e:
        print(f"Could not send purchase notification to user {user.telegram_id}. Error: {e}")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    # –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        admin_message = (
            f"üõçÔ∏è *–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.last_name} (@{user.username or user.telegram_id})\n"
            f"üíº *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {user.position}\n\n"
            f"üéÅ *–¢–æ–≤–∞—Ä:* {item.name}\n"
            f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {item.price} –±–∞–ª–ª–æ–≤\n\n"
            f"üìâ *–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {user.balance} –±–∞–ª–ª–æ–≤"
        )
        await send_telegram_message(chat_id=settings.TELEGRAM_CHAT_ID, text=admin_message)
    except Exception as e:
        print(f"Could not send admin notification. Error: {e}")

    await db.commit()
    return user.balance
# –ê–¥–º–∏–Ω
async def add_points_to_all_users(db: AsyncSession, amount: int):
    await db.execute(update(models.User).values(balance=models.User.balance + amount))
    await db.commit()
    return True

async def reset_balances(db: AsyncSession):
    await db.execute(update(models.User).values(balance=0))
    await db.commit()
    return True
